// src/components/search/GlobalSearch.js
import React, { useState, useEffect, useRef, useCallback } from 'react';
import searchEngine from './SearchEngine';

const GlobalSearch = ({ isActive, onResultSelect, searchQuery, onSearchChange }) => {
  const [results, setResults] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [indexStats, setIndexStats] = useState(null);
  const [searchOptions, setSearchOptions] = useState({
    category: null,
    minRelevance: 5,
    exactMatch: false
  });
  
  const searchTimeoutRef = useRef();
  const hasIndexedRef = useRef(false);

  // –í–∏–Ω–µ—Å–µ–º–æ performGlobalSearch –≤ useCallback
  const performGlobalSearch = useCallback((query) => {
    if (!query || query.length < 2) {
      setResults([]);
      return;
    }

    // –°–∫–∞—Å–æ–≤—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ç–∞–π–º–µ—Ä
    if (searchTimeoutRef.current) {
      clearTimeout(searchTimeoutRef.current);
    }

    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –Ω–æ–≤–∏–π —Ç–∞–π–º–µ—Ä (debounce)
    searchTimeoutRef.current = setTimeout(() => {
      setIsLoading(true);
      
      try {
        const searchResults = searchEngine.search(query, searchOptions);
        
        // –ì—Ä—É–ø—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö
        const groupedResults = groupResultsByCategory(searchResults);
        
        setResults(groupedResults);
        
        console.log(`üîç –ó–Ω–∞–π–¥–µ–Ω–æ ${searchResults.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –¥–ª—è "${query}"`);
        
      } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É:', error);
        setResults([]);
      } finally {
        setIsLoading(false);
      }
    }, 300);
  }, [searchOptions]);

  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —ñ–Ω–¥–µ–∫—Å—É –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
  useEffect(() => {
    if (isActive && !hasIndexedRef.current) {
      initializeIndex();
    }
  }, [isActive]);

  // –í–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–æ—à—É–∫—É –ø—Ä–∏ –∑–º—ñ–Ω—ñ –∑–∞–ø–∏—Ç—É
  useEffect(() => {
    if (isActive && searchQuery) {
      performGlobalSearch(searchQuery);
    } else {
      setResults([]);
    }
  }, [searchQuery, searchOptions, isActive, performGlobalSearch]);

  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —ñ–Ω–¥–µ–∫—Å—É
  const initializeIndex = async () => {
    if (hasIndexedRef.current) return;
    
    setIsLoading(true);
    hasIndexedRef.current = true; // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–∞–ø–æ—Ä –æ–¥—Ä–∞–∑—É
    
    try {
      // –î–∞—î–º–æ —á–∞—Å –Ω–∞ —Ä–µ–Ω–¥–µ—Ä —Å—Ç–æ—Ä—ñ–Ω–∫–∏
      await new Promise(resolve => setTimeout(resolve, 100));
      
      console.log('üöÄ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø–æ—à—É–∫—É...');
      
      searchEngine.indexContent();
      const stats = searchEngine.getIndexStats();
      
      setIndexStats(stats);
      
      console.log('‚úÖ –ì–ª–æ–±–∞–ª—å–Ω–∏–π –ø–æ—à—É–∫ –≥–æ—Ç–æ–≤–∏–π:', stats);
      
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ø–æ—à—É–∫—É:', error);
      hasIndexedRef.current = false; // –°–∫–∏–¥–∞—î–º–æ –ø—Ä–∞–ø–æ—Ä –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
    } finally {
      setIsLoading(false);
    }
  };

  // –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö
  const groupResultsByCategory = (searchResults) => {
    const grouped = {};
    
    searchResults.forEach(result => {
      const category = result.category || '–Ü–Ω—à–µ';
      if (!grouped[category]) {
        grouped[category] = [];
      }
      grouped[category].push(result);
    });

    // –°–æ—Ä—Ç—É—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑–∞ –≤–∞–∂–ª–∏–≤—ñ—Å—Ç—é
    const categoryOrder = ['–ü—Ä–æ–¥—É–∫—Ü—ñ—è', '–ü–æ—Å–ª—É–≥–∏', '–ì–æ–ª–æ–≤–Ω–∞', '–ü—Ä–æ –Ω–∞—Å', '–ö–æ–Ω—Ç–∞–∫—Ç–∏', '–ù–∞–≤—ñ–≥–∞—Ü—ñ—è', '–Ü–Ω—à–µ'];
    
    const sortedGrouped = {};
    categoryOrder.forEach(category => {
      if (grouped[category]) {
        sortedGrouped[category] = grouped[category].slice(0, 5); // –ú–∞–∫—Å–∏–º—É–º 5 –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
      }
    });

    return sortedGrouped;
  };

  // –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
  const handleResultClick = (result) => {
    console.log('üìç –ù–∞–≤—ñ–≥–∞—Ü—ñ—è –¥–æ:', result);
    
    // –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—è –ø–æ —Ä–æ—É—Ç–∞—Ö
    if (result.url && result.url.startsWith('#')) {
      // –¶–µ anchor link, –º–æ–∂–µ–º–æ –æ–±—Ä–æ–±–∏—Ç–∏ –Ω–∞–ø—Ä—è–º—É
      const targetElement = document.querySelector(result.url);
      if (targetElement) {
        targetElement.scrollIntoView({ 
          behavior: 'smooth', 
          block: 'start' 
        });
      }
    }
    
    // –ù–∞–≤—ñ–≥—É—î–º–æ –¥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞
    const success = searchEngine.navigateToElement(result);
    
    if (success) {
      // –ü–µ—Ä–µ–¥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ–º—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É
      onResultSelect(result);
      
      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ —ñ—Å—Ç–æ—Ä—ñ—é –ø–æ—à—É–∫—É
      saveToSearchHistory(result);
    }
  };

  // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ —ñ—Å—Ç–æ—Ä—ñ—é –ø–æ—à—É–∫—É
  const saveToSearchHistory = (result) => {
    try {
      const history = JSON.parse(localStorage.getItem('comspec_search_history') || '[]');
      const newItem = {
        query: searchQuery,
        result: {
          text: result.text,
          category: result.category,
          url: result.url
        },
        timestamp: Date.now()
      };
      
      // –î–æ–¥–∞—î–º–æ –≤ –ø–æ—á–∞—Ç–æ–∫ —Ç–∞ –æ–±–º–µ–∂—É—î–º–æ –¥–æ 20 –∑–∞–ø–∏—Å—ñ–≤
      const updatedHistory = [newItem, ...history.filter(item => 
        item.result.text !== result.text
      )].slice(0, 20);
      
      localStorage.setItem('comspec_search_history', JSON.stringify(updatedHistory));
    } catch (error) {
      console.warn('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –ø–æ—à—É–∫—É:', error);
    }
  };

  // –ó–º—ñ–Ω–∞ –æ–ø—Ü—ñ–π –ø–æ—à—É–∫—É
  const handleOptionChange = (option, value) => {
    setSearchOptions(prev => ({
      ...prev,
      [option]: value
    }));
  };

  // –†–µ–Ω–¥–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
  const renderResults = () => {
    if (isLoading) {
      return (
        <div className="global-search-loading">
          <div className="search-spinner"></div>
          <p>–ü–æ—à—É–∫ –ø–æ —Å–∞–π—Ç—É...</p>
        </div>
      );
    }

    if (!searchQuery || searchQuery.length < 2) {
      return (
        <div className="global-search-info">
          <h4>–ì–ª–æ–±–∞–ª—å–Ω–∏–π –ø–æ—à—É–∫</h4>
          <p>–í–≤–µ–¥—ñ—Ç—å –º—ñ–Ω—ñ–º—É–º 2 —Å–∏–º–≤–æ–ª–∏ –¥–ª—è –ø–æ—à—É–∫—É –ø–æ –≤—Å—å–æ–º—É —Å–∞–π—Ç—É</p>
          {indexStats && (
            <div className="index-stats">
              <small>
                –ü—Ä–æ—ñ–Ω–¥–µ–∫—Å–æ–≤–∞–Ω–æ: <strong>{indexStats.total}</strong> –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
              </small>
            </div>
          )}
        </div>
      );
    }

    const totalResults = Object.values(results).reduce((sum, category) => sum + category.length, 0);

    if (totalResults === 0) {
      return (
        <div className="global-search-empty">
          <h4>–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</h4>
          <p>–°–ø—Ä–æ–±—É–π—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –ø–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç –∞–±–æ –∑–Ω—ñ–º—ñ—Ç—å —Ñ—ñ–ª—å—Ç—Ä–∏</p>
          <button 
            className="btn-reindex"
            onClick={() => {
              hasIndexedRef.current = false;
              initializeIndex();
            }}
          >
            –ü–µ—Ä–µ—ñ–Ω–¥–µ–∫—Å—É–≤–∞—Ç–∏
          </button>
        </div>
      );
    }

    return (
      <div className="global-search-results">
        <div className="results-header">
          <h4>–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ ({totalResults})</h4>
        </div>
        
        {Object.entries(results).map(([category, categoryResults]) => (
          <div key={category} className="result-category">
            <h5 className="category-title">
              {category} ({categoryResults.length})
            </h5>
            
            <div className="category-results">
              {categoryResults.map((result, index) => (
                <div 
                  key={`${result.id}_${index}`}
                  className="global-result-item"
                  onClick={() => handleResultClick(result)}
                >
                  <div className="result-content">
                    <div className="result-text">
                      {highlightMatch(result.text, searchQuery)}
                    </div>
                    <div className="result-meta">
                      <span className="result-tag">{result.tagName}</span>
                      <span className="result-relevance">
                        {Math.round(result.relevance)}%
                      </span>
                    </div>
                  </div>
                  <div className="result-arrow">‚Üí</div>
                </div>
              ))}
            </div>
          </div>
        ))}
      </div>
    );
  };

  // –ü—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω—å
  const highlightMatch = (text, query) => {
    if (!query) return text;
    
    const regex = new RegExp(`(${query.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')})`, 'gi');
    const parts = text.split(regex);
    
    return parts.map((part, index) => 
      regex.test(part) ? 
        <mark key={index} className="search-highlight-text">{part}</mark> : 
        part
    );
  };

  // –†–µ–Ω–¥–µ—Ä —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
  const renderFilters = () => (
    <div className="global-search-filters">
      <div className="filter-group">
        <label>–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:</label>
        <select 
          value={searchOptions.category || ''}
          onChange={(e) => handleOptionChange('category', e.target.value || null)}
        >
          <option value="">–í—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó</option>
          <option value="–ü—Ä–æ–¥—É–∫—Ü—ñ—è">–ü—Ä–æ–¥—É–∫—Ü—ñ—è</option>
          <option value="–ü–æ—Å–ª—É–≥–∏">–ü–æ—Å–ª—É–≥–∏</option>
          <option value="–ü—Ä–æ –Ω–∞—Å">–ü—Ä–æ –Ω–∞—Å</option>
          <option value="–ö–æ–Ω—Ç–∞–∫—Ç–∏">–ö–æ–Ω—Ç–∞–∫—Ç–∏</option>
          <option value="–ù–∞–≤—ñ–≥–∞—Ü—ñ—è">–ù–∞–≤—ñ–≥–∞—Ü—ñ—è</option>
        </select>
      </div>
      
      <div className="filter-group">
        <label>
          <input
            type="checkbox"
            checked={searchOptions.exactMatch}
            onChange={(e) => handleOptionChange('exactMatch', e.target.checked)}
          />
          –¢–æ—á–Ω–µ —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è
        </label>
      </div>
    </div>
  );

  return (
    <div className="global-search-container">
      {renderFilters()}
      <div className="global-search-content">
        {renderResults()}
      </div>
    </div>
  );
};

export default GlobalSearch;