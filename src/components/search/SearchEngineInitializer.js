// src/components/search/SearchEngineInitializer.js
// üöÄ –ö–û–ú–ü–õ–ï–ö–°–ù–ê –°–ò–°–¢–ï–ú–ê –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–á COMSPEC SEARCH –∑ SearchHighlighting

console.log('üöÄ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≥–ª–æ–±–∞–ª—å–Ω–æ—ó –ø–æ—à—É–∫–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏ –∑ –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è–º...');

/**
 * ‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–æ—à—É–∫–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏ –∑ SearchHighlighting
 */
const initializeSearchEngine = async () => {
    try {
        console.log('üîß –ü–æ—á–∞—Ç–æ–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ø–æ—à—É–∫–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏...');
        
        // 1. –î–∏–Ω–∞–º—ñ—á–Ω–∏–π —ñ–º–ø–æ—Ä—Ç –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ–≥–æ HybridSearchEngine
        let HybridSearchEngine;
        
        try {
            // –°–ø—Ä–æ–±—É—î–º–æ —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –¥–∏–Ω–∞–º—ñ—á–Ω–æ
            const module = await import('./HybridSearchEngine');
            HybridSearchEngine = module.default;
        } catch (importError) {
            console.log('‚ö†Ô∏è –î–∏–Ω–∞–º—ñ—á–Ω–∏–π —ñ–º–ø–æ—Ä—Ç –Ω–µ –≤–¥–∞–≤—Å—è, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–∏–π');
            // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–∏–π, —è–∫—â–æ —î
            if (window.HybridSearchEngine) {
                HybridSearchEngine = window.HybridSearchEngine;
            } else {
                throw new Error('HybridSearchEngine –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π');
            }
        }
        
        if (!HybridSearchEngine) {
            throw new Error('HybridSearchEngine –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
        }
        
        // 2. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ—Å–Ω—É—é—á–∏–π –≥–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π
        let engine;
        if (window.hybridSearchEngine && window.hybridSearchEngine.isInitialized) {
            engine = window.hybridSearchEngine;
            console.log('‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ—Å–Ω—É—é—á–∏–π —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –¥–≤–∏–∂–æ–∫');
        } else if (window.hybridSearchEngine) {
            engine = window.hybridSearchEngine;
            await engine.initialize();
            console.log('‚úÖ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞–ª–∏ —ñ—Å–Ω—É—é—á–∏–π –¥–≤–∏–∂–æ–∫');
        } else if (HybridSearchEngine) {
            engine = new HybridSearchEngine();
            await engine.initialize();
            console.log('‚úÖ –°—Ç–≤–æ—Ä–∏–ª–∏ –Ω–æ–≤–∏–π –¥–≤–∏–∂–æ–∫');
        } else {
            throw new Error('HybridSearchEngine –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π');
        }
        
        // –î–æ–¥–∞—î–º–æ –¥–æ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±'—î–∫—Ç–∞
        window.hybridSearchEngine = engine;
        window.contextSearch = engine.contextSearch ? engine.contextSearch.bind(engine) : engine.search.bind(engine);
        
        // 3. –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –∑ –±–µ–∑–ø–µ—á–Ω–æ—é –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é
        console.log('üîç –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É...');
        
        let contextIssues = null;
        try {
            if (engine.diagnoseContextIssues) {
                contextIssues = engine.diagnoseContextIssues();
                
                // –í–ò–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–ø–µ—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ length
                if (contextIssues && 
                    typeof contextIssues === 'object' && 
                    contextIssues.problematicRecords && 
                    Array.isArray(contextIssues.problematicRecords) && 
                    contextIssues.problematicRecords.length > 0) {
                    
                    console.log('üîß –í–∏—è–≤–ª–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω—ñ –∑–∞–ø–∏—Å–∏, –≤–∏–ø—Ä–∞–≤–ª—è—î–º–æ...');
                    
                    if (engine.fixProblematicRecords) {
                        const fixResults = engine.fixProblematicRecords();
                        console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è:', fixResults);
                    }
                } else {
                    console.log('‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤ –ø–æ—Ä—è–¥–∫—É');
                }
            }
        } catch (diagError) {
            console.warn('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É:', diagError.message);
        }
        
        // 4. ‚úÖ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ SearchHighlighting
        let searchHighlighting = null;
        try {
            console.log('üé® –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è SearchHighlighting...');
            
            let SearchHighlighting;
            try {
                const highlightModule = await import('./SearchHighlighting');
                SearchHighlighting = highlightModule.default;
            } catch (highlightImportError) {
                console.log('‚ö†Ô∏è –î–∏–Ω–∞–º—ñ—á–Ω–∏–π —ñ–º–ø–æ—Ä—Ç SearchHighlighting –Ω–µ –≤–¥–∞–≤—Å—è');
                // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–∏–π, —è–∫—â–æ —î
                SearchHighlighting = window.SearchHighlighting;
            }
            
            if (SearchHighlighting) {
                searchHighlighting = new SearchHighlighting();
                window.SearchHighlighting = SearchHighlighting;
                window.searchHighlighting = searchHighlighting;
                console.log('‚úÖ SearchHighlighting —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
            } else {
                throw new Error('SearchHighlighting –Ω–µ –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
            }
            
        } catch (highlightError) {
            console.warn('‚ö†Ô∏è SearchHighlighting –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏:', highlightError.message);
            console.log('üí° –ü–æ—à—É–∫ –±—É–¥–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –±–µ–∑ –≤—ñ–∑—É–∞–ª—å–Ω–æ–≥–æ –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è');
            
            // –°—Ç–≤–æ—Ä—é—î–º–æ fallback —Ñ—É–Ω–∫—Ü—ñ—ó
            await initializeFallbackHighlighting();
        }
        
        // 5. ‚úÖ –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–π –≥–ª–æ–±–∞–ª—å–Ω–∏–π API –∑ –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è–º
        window.contextSearch = {
            // –û—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –ø–æ—à—É–∫—É
            search: (query, limit) => engine.search(query, limit),
            getStats: () => engine.getStats(),
            getContextStats: () => engine.getContextStats(),
            refresh: () => engine.refresh ? engine.refresh() : engine.initialize(),
            
            // ‚úÖ –§—É–Ω–∫—Ü—ñ—ó –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è (—è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω—ñ)
            highlight: searchHighlighting 
                ? (element, term, contextType) => searchHighlighting.highlightTermInElement 
                    ? searchHighlighting.highlightTermInElement(element, term, contextType)
                    : searchHighlighting.highlight(term, { container: element })
                : window.highlightSearchResults || ((element, term) => {
                    console.warn('–ü—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ');
                    return false;
                }),
            
            navigate: searchHighlighting
                ? (selector, term, contextType, directElement) => searchHighlighting.scrollToElementWithHighlight
                    ? searchHighlighting.scrollToElementWithHighlight(selector, term, contextType, directElement)
                    : searchHighlighting.navigateToResult({ selector, text: term }, term)
                : window.navigateToResult || ((selector, term) => {
                    console.warn('–ù–∞–≤—ñ–≥–∞—Ü—ñ—è –∑ –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
                    return false;
                }),
            
            clear: searchHighlighting
                ? () => searchHighlighting.clearHighlights()
                : window.clearSearchHighlights || (() => {
                    console.warn('–û—á–∏—â–µ–Ω–Ω—è –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ');
                    return false;
                }),
            
            // –î—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
            diagnose: () => engine.diagnoseContextIssues ? engine.diagnoseContextIssues() : engine.diagnoseSystem(),
            fix: () => engine.fixProblematicRecords ? engine.fixProblematicRecords() : { message: '–§—É–Ω–∫—Ü—ñ—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞' },
            
            // –¢–µ—Å—Ç–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
            test: {
                basic: () => {
                    console.log('üß™ –ë–∞–∑–æ–≤–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–æ—à—É–∫—É...');
                    try {
                        const results = engine.search('–ø—ñ—Å–æ–∫', 3);
                        console.log(`–ó–Ω–∞–π–¥–µ–Ω–æ ${results.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –¥–ª—è "–ø—ñ—Å–æ–∫"`);
                        return results;
                    } catch (error) {
                        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ —Ç–µ—Å—Ç—É:', error);
                        return [];
                    }
                },
                
                context: () => {
                    console.log('üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –ø–æ—à—É–∫—É...');
                    try {
                        if (engine.testContextSearch) {
                            engine.testContextSearch();
                        } else {
                            // –í–ª–∞—Å–Ω–∏–π —Ç–µ—Å—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
                            const phoneTest = engine.search('044', 2);
                            const addressTest = engine.search('–∫–∏—ó–≤', 2);
                            console.log(`–¢–µ–ª–µ—Ñ–æ–Ω: ${phoneTest.length}, –ê–¥—Ä–µ—Å–∞: ${addressTest.length}`);
                        }
                    } catch (error) {
                        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç—É:', error);
                    }
                },
                
                highlighting: () => {
                    if (!searchHighlighting && !window.highlightSearchResults) {
                        console.log('‚ùå –ü—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è');
                        return false;
                    }
                    
                    console.log('üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è...');
                    try {
                        const h1 = document.querySelector('h1');
                        if (h1) {
                            if (searchHighlighting && searchHighlighting.highlightTermInElement) {
                                searchHighlighting.highlightTermInElement(h1, 'COMSPEC', 'default');
                            } else if (window.highlightSearchResults) {
                                window.highlightSearchResults('COMSPEC', []);
                            }
                            
                            console.log('‚úÖ –¢–µ—Å—Ç –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ');
                            
                            setTimeout(() => {
                                if (searchHighlighting && searchHighlighting.clearHighlights) {
                                    searchHighlighting.clearHighlights();
                                } else if (window.clearSearchHighlights) {
                                    window.clearSearchHighlights();
                                }
                                console.log('üßπ –ü—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è –æ—á–∏—â–µ–Ω–æ');
                            }, 3000);
                            
                            return true;
                        } else {
                            console.log('‚ö†Ô∏è –ï–ª–µ–º–µ–Ω—Ç h1 –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
                            return false;
                        }
                    } catch (error) {
                        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è:', error);
                        return false;
                    }
                },
                
                navigation: () => {
                    if (!searchHighlighting && !window.navigateToResult) {
                        console.log('‚ùå –ù–∞–≤—ñ–≥–∞—Ü—ñ—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è');
                        return false;
                    }
                    
                    console.log('üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó...');
                    try {
                        if (searchHighlighting && searchHighlighting.scrollToElementWithHighlight) {
                            return searchHighlighting.scrollToElementWithHighlight('h1', 'COMSPEC', 'default');
                        } else if (window.navigateToResult) {
                            return window.navigateToResult({ selector: 'h1', text: 'COMSPEC' });
                        }
                        return false;
                    } catch (error) {
                        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó:', error);
                        return false;
                    }
                },
                
                // ‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω–∏–π —Ç–µ—Å—Ç —É—Å—ñ—î—ó —Å–∏—Å—Ç–µ–º–∏
                comprehensive: () => {
                    console.log('üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–ò–ô –¢–ï–°–¢ COMSPEC SEARCH');
                    console.log('='.repeat(50));
                    
                    let score = 0;
                    const maxScore = 6;
                    
                    // –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤–∏–π –ø–æ—à—É–∫
                    console.log('\n1Ô∏è‚É£ –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –ø–æ—à—É–∫—É...');
                    try {
                        const results = engine.search('–ø—ñ—Å–æ–∫', 3);
                        if (results.length > 0) {
                            console.log(`‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ ${results.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤`);
                            score++;
                        } else {
                            console.log('‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
                        }
                    } catch (error) {
                        console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É:', error.message);
                    }
                    
                    // –¢–µ—Å—Ç 2: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                    console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
                    try {
                        const stats = engine.getStats();
                        const contextStats = engine.getContextStats();
                        console.log(`‚úÖ –ó–∞–ø–∏—Å—ñ–≤: ${stats.totalRecords}, –ó –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º: ${contextStats.totalWithContext}`);
                        if (stats.totalRecords > 0) score++;
                    } catch (error) {
                        console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.message);
                    }
                    
                    // –¢–µ—Å—Ç 3: –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∏–π –ø–æ—à—É–∫
                    console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –ø–æ—à—É–∫—É...');
                    try {
                        const phoneResults = engine.search('044', 2);
                        const addressResults = engine.search('–∫–∏—ó–≤', 2);
                        if (phoneResults.length > 0 || addressResults.length > 0) {
                            console.log(`‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∏–π –ø–æ—à—É–∫ –ø—Ä–∞—Ü—é—î`);
                            score++;
                        } else {
                            console.log('‚ö†Ô∏è –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
                        }
                    } catch (error) {
                        console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –ø–æ—à—É–∫—É:', error.message);
                    }
                    
                    // –¢–µ—Å—Ç 4: –ü—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è
                    console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è...');
                    if (searchHighlighting || window.highlightSearchResults) {
                        try {
                            const h1 = document.querySelector('h1');
                            if (h1) {
                                if (searchHighlighting && searchHighlighting.highlightTermInElement) {
                                    searchHighlighting.highlightTermInElement(h1, '—Ç–µ—Å—Ç', 'default');
                                } else if (window.highlightSearchResults) {
                                    window.highlightSearchResults('—Ç–µ—Å—Ç', []);
                                }
                                console.log('‚úÖ –ü—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è –ø—Ä–∞—Ü—é—î');
                                score++;
                                
                                setTimeout(() => {
                                    if (searchHighlighting && searchHighlighting.clearHighlights) {
                                        searchHighlighting.clearHighlights();
                                    } else if (window.clearSearchHighlights) {
                                        window.clearSearchHighlights();
                                    }
                                }, 2000);
                            } else {
                                console.log('‚ö†Ô∏è –ï–ª–µ–º–µ–Ω—Ç –¥–ª—è –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
                            }
                        } catch (error) {
                            console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è:', error.message);
                        }
                    } else {
                        console.log('‚ùå –ü—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ');
                    }
                    
                    // –¢–µ—Å—Ç 5: –ù–∞–≤—ñ–≥–∞—Ü—ñ—è
                    console.log('\n5Ô∏è‚É£ –¢–µ—Å—Ç –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó...');
                    if (searchHighlighting || window.navigateToResult) {
                        try {
                            let result = false;
                            if (searchHighlighting && searchHighlighting.scrollToElementWithHighlight) {
                                result = searchHighlighting.scrollToElementWithHighlight('body', '—Ç–µ—Å—Ç', 'default');
                            } else if (window.navigateToResult) {
                                result = window.navigateToResult({ selector: 'body', text: '—Ç–µ—Å—Ç' });
                            }
                            
                            if (result) {
                                console.log('‚úÖ –ù–∞–≤—ñ–≥–∞—Ü—ñ—è –ø—Ä–∞—Ü—é—î');
                                score++;
                            } else {
                                console.log('‚ö†Ô∏è –ù–∞–≤—ñ–≥–∞—Ü—ñ—è –Ω–µ –∑–Ω–∞–π—à–ª–∞ –µ–ª–µ–º–µ–Ω—Ç');
                            }
                        } catch (error) {
                            console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó:', error.message);
                        }
                    } else {
                        console.log('‚ùå –ù–∞–≤—ñ–≥–∞—Ü—ñ—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
                    }
                    
                    // –¢–µ—Å—Ç 6: –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
                    console.log('\n6Ô∏è‚É£ –¢–µ—Å—Ç –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ...');
                    try {
                        const startTime = performance.now();
                        engine.search('–±—É–¥—ñ–≤–Ω–∏—Ü—Ç–≤–æ', 5);
                        const endTime = performance.now();
                        const searchTime = endTime - startTime;
                        
                        if (searchTime < 100) {
                            console.log(`‚úÖ –®–≤–∏–¥–∫—ñ—Å—Ç—å –ø–æ—à—É–∫—É: ${searchTime.toFixed(2)}ms`);
                            score++;
                        } else {
                            console.log(`‚ö†Ô∏è –ü–æ–≤—ñ–ª—å–Ω–∏–π –ø–æ—à—É–∫: ${searchTime.toFixed(2)}ms`);
                        }
                    } catch (error) {
                        console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ:', error.message);
                    }
                    
                    // –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
                    console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–ò –¢–ï–°–¢–£–í–ê–ù–ù–Ø:');
                    console.log(`üéØ –û—Ü—ñ–Ω–∫–∞: ${score}/${maxScore} (${Math.round((score/maxScore)*100)}%)`);
                    
                    if (score === maxScore) {
                        console.log('üèÜ –Ü–î–ï–ê–õ–¨–ù–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢! –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∞—Ü—é—î –±–µ–∑–¥–æ–≥–∞–Ω–Ω–æ');
                    } else if (score >= maxScore * 0.8) {
                        console.log('ü•á –í–Ü–î–ú–Ü–ù–ù–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢! –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∞—Ü—é—î —á—É–¥–æ–≤–æ');
                    } else if (score >= maxScore * 0.6) {
                        console.log('ü•à –î–û–ë–†–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢! –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∞—Ü—é—î –∑ –º—ñ–Ω–æ—Ä–Ω–∏–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏');
                    } else {
                        console.log('ü•â –ü–û–¢–†–ï–ë–£–Ñ –ü–û–ö–†–ê–©–ï–ù–ù–Ø! –Ñ –ø—Ä–æ–±–ª–µ–º–∏, —è–∫—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏');
                    }
                    
                    return { score, maxScore, percentage: Math.round((score/maxScore)*100) };
                }
            }
        };
        
        // 6. –û—Ç—Ä–∏–º—É—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const stats = engine.getStats();
        const contextStats = engine.getContextStats();
        
        console.log('‚úÖ –ü–æ—à—É–∫–æ–≤–∞ —Å–∏—Å—Ç–µ–º–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞:', {
            totalRecords: stats.totalRecords,
            staticIndex: stats.staticIndex,
            dynamicIndex: stats.dynamicIndex,
            contextCoverage: `${contextStats.totalWithContext}/${stats.totalRecords}`,
            highlightingAvailable: !!(searchHighlighting || window.highlightSearchResults)
        });
        
        // 7. –¢–µ—Å—Ç–æ–≤–∏–π –ø–æ—à—É–∫ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
        const testResults = engine.search('—â–µ–±—ñ–Ω—å', 3);
        console.log(`üß™ –¢–µ—Å—Ç–æ–≤–∏–π –ø–æ—à—É–∫: –∑–Ω–∞–π–¥–µ–Ω–æ ${testResults.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤`);
        
        // 8. ‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≥–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å —Å–∏—Å—Ç–µ–º–∏
        console.log('üéâ COMSPEC SEARCH –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê!');
        console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ –≤ –∫–æ–Ω—Å–æ–ª—ñ:');
        console.log('  window.contextSearch.search("—Ç–µ—Ä–º—ñ–Ω") - –ø–æ—à—É–∫');
        console.log('  window.contextSearch.highlight(element, "—Ç–µ—Ä–º—ñ–Ω") - –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è');
        console.log('  window.contextSearch.navigate("—Å–µ–ª–µ–∫—Ç–æ—Ä", "—Ç–µ—Ä–º—ñ–Ω") - –Ω–∞–≤—ñ–≥–∞—Ü—ñ—è');
        console.log('  window.contextSearch.test.basic() - —Ç–µ—Å—Ç –ø–æ—à—É–∫—É');
        console.log('  window.contextSearch.test.highlighting() - —Ç–µ—Å—Ç –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è');
        console.log('  window.contextSearch.test.comprehensive() - –ø–æ–≤–Ω–∏–π —Ç–µ—Å—Ç');
        console.log('  window.contextSearch.getContextStats() - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É');
        
        return {
            engine: engine,
            highlighting: searchHighlighting,
            api: window.contextSearch
        };
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ø–æ—à—É–∫–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏:', error);
        
        // –°—Ç–≤–æ—Ä—é—î–º–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π fallback API
        window.contextSearch = {
            search: () => { console.error('–ü–æ—à—É–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π:', error.message); return []; },
            highlight: () => console.error('–ü—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ:', error.message),
            navigate: () => console.error('–ù–∞–≤—ñ–≥–∞—Ü—ñ—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:', error.message),
            clear: () => console.error('–û—á–∏—â–µ–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ:', error.message),
            getStats: () => ({ error: error.message }),
            test: {
                basic: () => console.error('–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ:', error.message),
                comprehensive: () => ({ score: 0, maxScore: 6, percentage: 0, error: error.message })
            }
        };
        
        return null;
    }
};

/**
 * ‚ö° –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è fallback —Ñ—É–Ω–∫—Ü—ñ–π –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è
 */
async function initializeFallbackHighlighting() {
    try {
        // –§—É–Ω–∫—Ü—ñ—è –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        window.highlightSearchResults = function(query, results, options = {}) {
            console.log(`üé® Fallback –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è –¥–ª—è "${query}"`);
            
            const {
                container = document.body,
                highlightClass = 'comspec-search-highlight'
            } = options;
            
            if (!query) return false;
            
            // –û—á–∏—â–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è
            clearHighlights(container, highlightClass);
            
            // –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–µ–≥—É–ª—è—Ä–Ω–∏–π –≤–∏—Ä–∞–∑
            const regex = new RegExp(`(${query.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')})`, 'gi');
            
            // –ü—ñ–¥—Å–≤—ñ—á—É—î–º–æ —Ç–µ–∫—Å—Ç
            highlightInElement(container, regex, highlightClass);
            
            console.log(`‚úÖ Fallback –ø—ñ–¥—Å–≤—ñ—á–µ–Ω–æ –≤—Ö–æ–¥–∂–µ–Ω–Ω—è –¥–ª—è "${query}"`);
            return true;
        };
        
        // –§—É–Ω–∫—Ü—ñ—è –æ—á–∏—â–µ–Ω–Ω—è –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è
        window.clearSearchHighlights = function(container = document.body) {
            clearHighlights(container, 'comspec-search-highlight');
            console.log('üßπ Fallback –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è –æ—á–∏—â–µ–Ω–æ');
        };
        
        // –§—É–Ω–∫—Ü—ñ—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
        window.navigateToResult = function(resultData) {
            if (!resultData) {
                console.warn('‚ö†Ô∏è –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó');
                return false;
            }
            
            try {
                let targetElement = null;
                
                if (resultData.element) {
                    targetElement = resultData.element;
                } else if (resultData.selector) {
                    targetElement = document.querySelector(resultData.selector);
                } else if (resultData.text) {
                    // –ü–æ—à—É–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
                    const elements = Array.from(document.querySelectorAll('*'))
                        .filter(el => el.textContent && el.textContent.includes(resultData.text));
                    targetElement = elements[0];
                }
                
                if (targetElement) {
                    // –ü—Ä–æ–∫—Ä—É—á—É—î–º–æ –¥–æ –µ–ª–µ–º–µ–Ω—Ç–∞
                    targetElement.scrollIntoView({ 
                        behavior: 'smooth', 
                        block: 'center' 
                    });
                    
                    // –¢–∏–º—á–∞—Å–æ–≤–µ –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è
                    const originalStyle = targetElement.style.cssText;
                    targetElement.style.cssText += `
                        background-color: #ffff00 !important;
                        transition: background-color 0.3s ease !important;
                    `;
                    
                    setTimeout(() => {
                        targetElement.style.cssText = originalStyle;
                    }, 2000);
                    
                    console.log('üìç Fallback –Ω–∞–≤—ñ–≥–∞—Ü—ñ—è –≤–∏–∫–æ–Ω–∞–Ω–∞');
                    return true;
                }
            } catch (error) {
                console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ fallback –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó:', error);
            }
            
            return false;
        };
        
        // –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
        function clearHighlights(container, highlightClass) {
            const highlights = container.querySelectorAll(`.${highlightClass}`);
            highlights.forEach(highlight => {
                const parent = highlight.parentNode;
                if (parent) {
                    parent.replaceChild(document.createTextNode(highlight.textContent), highlight);
                    parent.normalize();
                }
            });
        }
        
        function highlightInElement(element, regex, highlightClass) {
            const walker = document.createTreeWalker(
                element,
                NodeFilter.SHOW_TEXT,
                null,
                false
            );
            
            const textNodes = [];
            let node;
            
            while ((node = walker.nextNode())) {
                if (node.parentElement.tagName !== 'SCRIPT' && 
                    node.parentElement.tagName !== 'STYLE' &&
                    !node.parentElement.classList.contains(highlightClass)) {
                    textNodes.push(node);
                }
            }
            
            textNodes.forEach(textNode => {
                const text = textNode.textContent;
                if (regex.test(text)) {
                    const highlightedHTML = text.replace(regex, 
                        `<span class="${highlightClass}" style="background-color: #ffff00; font-weight: bold;">$1</span>`
                    );
                    
                    const wrapper = document.createElement('div');
                    wrapper.innerHTML = highlightedHTML;
                    
                    const fragment = document.createDocumentFragment();
                    while (wrapper.firstChild) {
                        fragment.appendChild(wrapper.firstChild);
                    }
                    
                    textNode.parentNode.replaceChild(fragment, textNode);
                }
            });
        }
        
        console.log('‚úÖ Fallback —Ñ—É–Ω–∫—Ü—ñ—ó –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
        
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó fallback –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è:', error);
    }
}

/**
 * ‚úÖ –§—É–Ω–∫—Ü—ñ—è —à–≤–∏–¥–∫–æ—ó –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º–∏
 */
const diagnoseSearchSystem = () => {
    console.log('üî¨ –®–í–ò–î–ö–ê –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê COMSPEC SEARCH');
    console.log('='.repeat(50));
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
    const checks = {
        hybridSearchEngine: !!window.hybridSearchEngine,
        contextSearch: !!window.contextSearch,
        searchHighlighting: !!(window.searchHighlighting || window.SearchHighlighting),
        highlightFunction: !!(window.contextSearch?.highlight || window.highlightSearchResults),
        navigateFunction: !!(window.contextSearch?.navigate || window.navigateToResult),
        clearFunction: !!(window.contextSearch?.clear || window.clearSearchHighlights)
    };
    
    console.log('üìä –î–û–°–¢–£–ü–ù–Ü–°–¢–¨ –ö–û–ú–ü–û–ù–ï–ù–¢–Ü–í:');
    Object.entries(checks).forEach(([component, available]) => {
        console.log(`  ${available ? '‚úÖ' : '‚ùå'} ${component}`);
    });
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–≤–∏–∂–∫–∞
    if (window.hybridSearchEngine) {
        try {
            const stats = window.hybridSearchEngine.getStats();
            const contextStats = window.hybridSearchEngine.getContextStats();
            
            console.log('\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–í–ò–ñ–ö–ê:');
            console.log(`  üìù –í—Å—å–æ–≥–æ –∑–∞–ø–∏—Å—ñ–≤: ${stats.totalRecords}`);
            console.log(`  üîç –°—Ç–∞—Ç–∏—á–Ω–∏—Ö: ${stats.staticIndex}`);
            console.log(`  üîÑ –î–∏–Ω–∞–º—ñ—á–Ω–∏—Ö: ${stats.dynamicIndex}`);
            console.log(`  üéØ –ó –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º: ${contextStats.totalWithContext}/${stats.totalRecords} (${Math.round((contextStats.totalWithContext / stats.totalRecords) * 100)}%)`);
            
            const coverage = Math.round((contextStats.totalWithContext / stats.totalRecords) * 100);
            if (coverage >= 100) {
                console.log('  üèÜ –Ü–î–ï–ê–õ–¨–ù–ï –ü–û–ö–†–ò–¢–¢–Ø –ö–û–ù–¢–ï–ö–°–¢–û–ú!');
            } else if (coverage >= 95) {
                console.log('  ü•á –í–Ü–î–ú–Ü–ù–ù–ï –ü–û–ö–†–ò–¢–¢–Ø –ö–û–ù–¢–ï–ö–°–¢–û–ú');
            } else if (coverage >= 90) {
                console.log('  ü•à –î–û–ë–†–ï –ü–û–ö–†–ò–¢–¢–Ø –ö–û–ù–¢–ï–ö–°–¢–û–ú');
            } else {
                console.log('  ‚ö†Ô∏è –ü–û–¢–†–ï–ë–£–Ñ –ü–û–ö–†–ê–©–ï–ù–ù–Ø –ö–û–ù–¢–ï–ö–°–¢–£');
            }
            
        } catch (error) {
            console.log('  ‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.message);
        }
    }
    
    // –¢–µ—Å—Ç –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    if (window.hybridSearchEngine) {
        console.log('\n‚ö° –¢–ï–°–¢ –ü–†–û–î–£–ö–¢–ò–í–ù–û–°–¢–Ü:');
        try {
            const startTime = performance.now();
            const results = window.hybridSearchEngine.search('–ø—ñ—Å–æ–∫', 5);
            const endTime = performance.now();
            const searchTime = endTime - startTime;
            
            console.log(`  üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤: ${results.length}`);
            console.log(`  ‚è±Ô∏è –ß–∞—Å –ø–æ—à—É–∫—É: ${searchTime.toFixed(2)}ms`);
            
            if (searchTime < 10) {
                console.log('  üöÄ –ù–ê–î–®–í–ò–î–ö–û!');
            } else if (searchTime < 50) {
                console.log('  ‚ö° –®–í–ò–î–ö–û');
            } else if (searchTime < 100) {
                console.log('  ‚úÖ –ù–û–†–ú–ê–õ–¨–ù–û');
            } else {
                console.log('  ‚ö†Ô∏è –ü–û–í–Ü–õ–¨–ù–û');
            }
        } catch (error) {
            console.log('  ‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ:', error.message);
        }
    }
    
    console.log('\nüéØ –ì–û–¢–û–í–ù–Ü–°–¢–¨ –°–ò–°–¢–ï–ú–ò:');
    const readiness = Object.values(checks).filter(Boolean).length;
    const total = Object.keys(checks).length;
    const percentage = Math.round((readiness / total) * 100);
    
    console.log(`  üìä ${readiness}/${total} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤ –≥–æ—Ç–æ–≤–æ (${percentage}%)`);
    
    if (percentage >= 100) {
        console.log('  üöÄ –°–ò–°–¢–ï–ú–ê –ü–û–í–ù–Ü–°–¢–Æ –ì–û–¢–û–í–ê!');
    } else if (percentage >= 80) {
        console.log('  ‚úÖ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ó –ú–Ü–ù–û–†–ù–ò–ú–ò –û–ë–ú–ï–ñ–ï–ù–ù–Ø–ú–ò');
    } else if (percentage >= 60) {
        console.log('  ‚ö†Ô∏è –°–ò–°–¢–ï–ú–ê –ß–ê–°–¢–ö–û–í–û –ì–û–¢–û–í–ê');
    } else {
        console.log('  ‚ùå –°–ò–°–¢–ï–ú–ê –ü–û–¢–†–ï–ë–£–Ñ –ù–ê–õ–ê–ì–û–î–ñ–ï–ù–ù–Ø');
    }
    
    return {
        components: checks,
        readiness: percentage,
        recommendations: getRecommendations(checks)
    };
};

/**
 * ‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏
 */
const getRecommendations = (checks) => {
    const recommendations = [];
    
    if (!checks.hybridSearchEngine) {
        recommendations.push('–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é HybridSearchEngine');
    }
    
    if (!checks.searchHighlighting) {
        recommendations.push('–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ñ–∞–π–ª—É SearchHighlighting.js –≤ –ø–∞–ø—Ü—ñ search/');
    }
    
    if (!checks.contextSearch) {
        recommendations.push('–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ API contextSearch');
    }
    
    if (!checks.highlightFunction) {
        recommendations.push('–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—é —Ñ—É–Ω–∫—Ü—ñ–π –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è');
    }
    
    if (recommendations.length === 0) {
        recommendations.push('–°–∏—Å—Ç–µ–º–∞ –ø—Ä–∞—Ü—é—î –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ! üéâ');
    }
    
    return recommendations;
};

/**
 * ‚úÖ –§—É–Ω–∫—Ü—ñ—è –ø–æ–≤–Ω–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É —Å–∏—Å—Ç–µ–º–∏
 */
const reinitializeSearchSystem = async () => {
    console.log('üîÑ –ü–û–í–ù–ò–ô –ü–ï–†–ï–ó–ê–ü–£–°–ö –ü–û–®–£–ö–û–í–û–á –°–ò–°–¢–ï–ú–ò...');
    
    // –û—á–∏—â—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
    if (window.hybridSearchEngine) {
        delete window.hybridSearchEngine;
    }
    if (window.searchHighlighting) {
        delete window.searchHighlighting;
    }
    if (window.contextSearch) {
        delete window.contextSearch;
    }
    if (window.highlightSearchResults) {
        delete window.highlightSearchResults;
    }
    if (window.clearSearchHighlights) {
        delete window.clearSearchHighlights;
    }
    if (window.navigateToResult) {
        delete window.navigateToResult;
    }
    
    console.log('üßπ –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –æ—á–∏—â–µ–Ω–æ');
    
    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—î–º–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é
    const result = await initializeSearchEngine();
    
    if (result) {
        console.log('‚úÖ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
        scheduleAutoDiagnosis();
    } else {
        console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É');
    }
    
    return result;
};

/**
 * ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –∑–∞–ø—É—Å–∫ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥–∏ –ø—ñ—Å–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
 */
const scheduleAutoDiagnosis = () => {
    setTimeout(() => {
        console.log('\nüîç –ê–í–¢–û–ú–ê–¢–ò–ß–ù–ê –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê –ß–ï–†–ï–ó 2 –°–ï–ö–£–ù–î–ò...\n');
        diagnoseSearchSystem();
    }, 2000);
};

/**
 * ‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ñ —É—Ç–∏–ª—ñ—Ç–∏ –¥–ª—è —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—ñ–≤
 */
window.comspecSearchUtils = {
    // –®–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç –≤—Å—ñ—î—ó —Å–∏—Å—Ç–µ–º–∏
    quickTest: () => {
        console.log('üöÄ –®–í–ò–î–ö–ò–ô –¢–ï–°–¢ COMSPEC SEARCH');
        console.log('='.repeat(40));
        
        let testsPassed = 0;
        let totalTests = 0;
        
        // –¢–µ—Å—Ç –ø–æ—à—É–∫—É
        totalTests++;
        if (window.contextSearch?.search) {
            try {
                const results = window.contextSearch.search('–ø—ñ—Å–æ–∫', 3);
                console.log(`‚úÖ –ü–æ—à—É–∫: –∑–Ω–∞–π–¥–µ–Ω–æ ${results.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –¥–ª—è "–ø—ñ—Å–æ–∫"`);
                if (results.length > 0) testsPassed++;
            } catch (error) {
                console.log(`‚ùå –ü–æ—à—É–∫: –ø–æ–º–∏–ª–∫–∞ - ${error.message}`);
            }
        } else {
            console.log('‚ùå –ü–æ—à—É–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π');
        }
        
        // –¢–µ—Å—Ç –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è
        totalTests++;
        if (window.contextSearch?.test?.highlighting) {
            try {
                const result = window.contextSearch.test.highlighting();
                if (result) {
                    console.log('‚úÖ –ü—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è –ø—Ä–∞—Ü—é—î');
                    testsPassed++;
                } else {
                    console.log('‚ö†Ô∏è –ü—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è —á–∞—Å—Ç–∫–æ–≤–æ –ø—Ä–∞—Ü—é—î');
                }
            } catch (error) {
                console.log(`‚ùå –ü—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è: –ø–æ–º–∏–ª–∫–∞ - ${error.message}`);
            }
        } else {
            console.log('‚ùå –¢–µ—Å—Ç –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π');
        }
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        totalTests++;
        if (window.contextSearch?.getContextStats) {
            try {
                const stats = window.contextSearch.getContextStats();
                console.log(`‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç: ${stats.totalWithContext} –∑–∞–ø–∏—Å—ñ–≤`);
                if (stats.totalWithContext > 0) testsPassed++;
            } catch (error) {
                console.log(`‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –ø–æ–º–∏–ª–∫–∞ - ${error.message}`);
            }
        } else {
            console.log('‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
        }
        
        // –†–µ–∑—É–ª—å—Ç–∞—Ç
        const percentage = Math.round((testsPassed / totalTests) * 100);
        console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${testsPassed}/${totalTests} —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ (${percentage}%)`);
        
        if (percentage >= 100) {
            console.log('üèÜ –í–°–ï –Ü–î–ï–ê–õ–¨–ù–û!');
        } else if (percentage >= 66) {
            console.log('‚úÖ –î–û–ë–†–ï, –Ñ –ú–Ü–ù–û–†–ù–Ü –ü–†–û–ë–õ–ï–ú–ò');
        } else {
            console.log('‚ö†Ô∏è –ü–û–¢–†–ï–ë–£–Ñ –£–í–ê–ì–ò');
        }
        
        return { testsPassed, totalTests, percentage };
    },
    
    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π
    demo: () => {
        console.log('üé¨ –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø COMSPEC SEARCH');
        console.log('='.repeat(40));
        
        const queries = ['—â–µ–±—ñ–Ω—å', '–ø—ñ—Å–æ–∫', '–¥–æ—Å—Ç–∞–≤–∫–∞', '–∫–æ–Ω—Ç–∞–∫—Ç–∏'];
        
        queries.forEach((query, index) => {
            setTimeout(() => {
                console.log(`\nüîç –î–µ–º–æ-–∑–∞–ø–∏—Ç ${index + 1}: "${query}"`);
                if (window.contextSearch?.search) {
                    try {
                        const results = window.contextSearch.search(query, 2);
                        console.log(`  üìä –ó–Ω–∞–π–¥–µ–Ω–æ: ${results.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤`);
                        
                        if (results[0]) {
                            console.log(`  ü•á –ù–∞–π–∫—Ä–∞—â–∏–π: "${results[0].title || results[0].text || '–ë–µ–∑ –Ω–∞–∑–≤–∏'}" (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ñ—Å—Ç—å: ${results[0].relevance || 'N/A'})`);
                            
                            // –¢–µ—Å—Ç –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –¥–æ –ø–µ—Ä—à–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
                            if (window.contextSearch?.navigate && index === 0) {
                                console.log(`  üéØ –¢–µ—Å—Ç—É—î–º–æ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é...`);
                                try {
                                    window.contextSearch.navigate('h1', query, 'default');
                                    console.log(`  ‚úÖ –ù–∞–≤—ñ–≥–∞—Ü—ñ—è –≤–∏–∫–æ–Ω–∞–Ω–∞`);
                                } catch (navError) {
                                    console.log(`  ‚ö†Ô∏è –ù–∞–≤—ñ–≥–∞—Ü—ñ—è: ${navError.message}`);
                                }
                            }
                        }
                    } catch (error) {
                        console.log(`  ‚ùå –ü–æ–º–∏–ª–∫–∞: ${error.message}`);
                    }
                } else {
                    console.log(`  ‚ùå –ü–æ—à—É–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π`);
                }
            }, index * 1500);
        });
        
        return true;
    },
    
    // –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º
    fix: () => {
        console.log('üîß –ê–í–¢–û–ú–ê–¢–ò–ß–ù–ï –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø –ü–†–û–ë–õ–ï–ú');
        
        let fixesApplied = 0;
        const fixes = [];
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–∞ –≤–∏–ø—Ä–∞–≤–ª—è—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π –¥–≤–∏–∂–æ–∫
        if (!window.hybridSearchEngine && window.HybridSearchEngine) {
            try {
                window.hybridSearchEngine = new window.HybridSearchEngine();
                fixes.push('–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ hybridSearchEngine');
                fixesApplied++;
            } catch (error) {
                fixes.push(`–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏ hybridSearchEngine: ${error.message}`);
            }
        }
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—ó –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è
        if (!window.highlightSearchResults) {
            try {
                initializeFallbackHighlighting();
                fixes.push('–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ —Ñ—É–Ω–∫—Ü—ñ—ó –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è');
                fixesApplied++;
            } catch (error) {
                fixes.push(`–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏ –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è: ${error.message}`);
            }
        }
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ contextSearch API
        if (!window.contextSearch && window.hybridSearchEngine) {
            try {
                window.contextSearch = {
                    search: window.hybridSearchEngine.search.bind(window.hybridSearchEngine),
                    getStats: window.hybridSearchEngine.getStats.bind(window.hybridSearchEngine),
                    getContextStats: window.hybridSearchEngine.getContextStats.bind(window.hybridSearchEngine)
                };
                fixes.push('–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ contextSearch API');
                fixesApplied++;
            } catch (error) {
                fixes.push(`–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏ contextSearch: ${error.message}`);
            }
        }
        
        // –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ –≤ –¥–≤–∏–∂–∫—É
        if (window.hybridSearchEngine?.fixProblematicRecords) {
            try {
                const results = window.hybridSearchEngine.fixProblematicRecords();
                fixes.push(`–í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å—ñ–≤ –≤ –¥–≤–∏–∂–∫—É: ${results.fixedRecords || 0}`);
                fixesApplied++;
            } catch (error) {
                fixes.push(`–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Å–∏: ${error.message}`);
            }
        }
        
        console.log(`‚úÖ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${fixesApplied} –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—å`);
        fixes.forEach(fix => console.log(`  ‚Ä¢ ${fix}`));
        
        return { fixesApplied, fixes };
    },
    
    // –ü–æ–≤–Ω–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º–∏
    restart: () => {
        console.log('üîÑ –ü–ï–†–ï–ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–ò...');
        return reinitializeSearchSystem();
    },
    
    // –ï–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    exportStats: () => {
        if (!window.hybridSearchEngine) {
            console.log('‚ùå HybridSearchEngine –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π');
            return null;
        }
        
        try {
            const stats = window.hybridSearchEngine.getStats();
            const contextStats = window.hybridSearchEngine.getContextStats();
            const diagnosis = diagnoseSearchSystem();
            
            // –¢–µ—Å—Ç –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
            const startTime = performance.now();
            window.hybridSearchEngine.search('—Ç–µ—Å—Ç', 5);
            const endTime = performance.now();
            const searchTime = endTime - startTime;
            
            const fullStats = {
                timestamp: new Date().toISOString(),
                version: 'COMSPEC Search v7.1',
                engine: stats,
                context: contextStats,
                system: diagnosis,
                performance: {
                    searchTime: searchTime,
                    searchTimeCategory: searchTime < 10 ? '–Ω–∞–¥—à–≤–∏–¥–∫–æ' : 
                                      searchTime < 50 ? '—à–≤–∏–¥–∫–æ' : 
                                      searchTime < 100 ? '–Ω–æ—Ä–º–∞–ª—å–Ω–æ' : '–ø–æ–≤—ñ–ª—å–Ω–æ'
                },
                features: {
                    highlighting: !!(window.searchHighlighting || window.highlightSearchResults),
                    navigation: !!(window.contextSearch?.navigate || window.navigateToResult),
                    api: !!window.contextSearch
                }
            };
            
            console.log('üìä –ï–ö–°–ü–û–†–¢ –°–¢–ê–¢–ò–°–¢–ò–ö–ò COMSPEC SEARCH');
            console.log('=============================================');
            console.log(JSON.stringify(fullStats, null, 2));
            
            // –ö–æ–ø—ñ—é—î–º–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É (—è–∫—â–æ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è)
            if (navigator.clipboard) {
                navigator.clipboard.writeText(JSON.stringify(fullStats, null, 2))
                    .then(() => console.log('üìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É'))
                    .catch(() => console.log('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏ –≤ –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É'));
            }
            
            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ localStorage
            try {
                localStorage.setItem('comspec-search-stats', JSON.stringify(fullStats));
                console.log('üíæ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∞ —É localStorage');
            } catch (storageError) {
                console.log('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –≤ localStorage');
            }
            
            return fullStats;
            
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            return { error: error.message };
        }
    },
    
    // –¢–µ—Å—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ—à—É–∫—É
    testSearch: (query, limit = 5) => {
        if (!window.hybridSearchEngine) {
            console.error('‚ùå –î–≤–∏–∂–æ–∫ –ø–æ—à—É–∫—É –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
            return [];
        }
        
        console.log(`üîç –¢–µ—Å—Ç –ø–æ—à—É–∫—É: "${query}"`);
        try {
            const startTime = performance.now();
            const results = window.hybridSearchEngine.search(query, limit);
            const endTime = performance.now();
            const searchTime = endTime - startTime;
            
            console.log(`üìä –ó–Ω–∞–π–¥–µ–Ω–æ: ${results.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –∑–∞ ${searchTime.toFixed(2)}ms`);
            
            results.slice(0, 3).forEach((result, index) => {
                console.log(`  ${index + 1}. ${result.title || result.text || '–ë–µ–∑ –Ω–∞–∑–≤–∏'} (${result.relevance || 'N/A'})`);
            });
            
            return results;
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç-–ø–æ—à—É–∫—É:', error);
            return [];
        }
    },
    
    // –ê–Ω–∞–ª—ñ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
    analyzeContext: () => {
        if (!window.hybridSearchEngine) {
            console.error('‚ùå –î–≤–∏–∂–æ–∫ –ø–æ—à—É–∫—É –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
            return null;
        }
        
        try {
            if (window.hybridSearchEngine.analyzeContext) {
                return window.hybridSearchEngine.analyzeContext();
            } else {
                const contextStats = window.hybridSearchEngine.getContextStats();
                console.log('üîç –ê–ù–ê–õ–Ü–ó –ö–û–ù–¢–ï–ö–°–¢–£');
                console.log('==============================');
                console.log('üìä –†–æ–∑–ø–æ–¥—ñ–ª –ø–æ —Ç–∏–ø–∞—Ö –ø–æ–ª—ñ–≤:');
                
                if (contextStats.byField) {
                    Object.entries(contextStats.byField).forEach(([field, count]) => {
                        if (count > 0) {
                            console.log(`   ${field}: ${count} –∑–∞–ø–∏—Å—ñ–≤`);
                        }
                    });
                }
                
                console.log(`\nüîç –í—Å—å–æ–≥–æ –ø–æ—à—É–∫–æ–≤–∏—Ö –ø–æ–ª—ñ–≤: ${contextStats.totalSearchableFields || 'N/A'}`);
                console.log(`üìù –ó–∞–ø–∏—Å—ñ–≤ –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º: ${contextStats.totalWithContext}`);
                
                return contextStats;
            }
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –∫–æ–Ω—Ç–µ–∫—Å—Ç—É:', error);
            return null;
        }
    },
    
    // –ü–æ–≤–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    fullDiagnosis: () => {
        console.log('üî¨ –ü–û–í–ù–ê –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–ò COMSPEC SEARCH');
        console.log('===============================================');
        
        const quickDiag = diagnoseSearchSystem();
        
        if (window.hybridSearchEngine) {
            console.log('\nüîß –î–ï–¢–ê–õ–¨–ù–ê –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê –î–í–ò–ñ–ö–ê:');
            
            if (window.hybridSearchEngine.diagnoseContextIssues) {
                try {
                    window.hybridSearchEngine.diagnoseContextIssues();
                } catch (error) {
                    console.log('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É:', error.message);
                }
            }
            
            if (window.hybridSearchEngine.exportDiagnosticData) {
                console.log('\nüìä –ï–ö–°–ü–û–†–¢ –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–• –î–ê–ù–ò–•:');
                try {
                    window.hybridSearchEngine.exportDiagnosticData();
                } catch (error) {
                    console.log('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error.message);
                }
            }
        }
        
        return quickDiag;
    }
};

// –ì–ª–æ–±–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
window.diagnoseSearchSystem = diagnoseSearchSystem;

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ DOM
if (typeof window !== 'undefined') {
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
            initializeSearchEngine().then(() => {
                scheduleAutoDiagnosis();
            });
        });
    } else {
        // DOM –≤–∂–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π
        initializeSearchEngine().then(() => {
            scheduleAutoDiagnosis();
        });
    }
}

// –ï–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü—ñ–π –¥–ª—è –º–æ–¥—É–ª—å–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏
export { initializeSearchEngine, diagnoseSearchSystem, reinitializeSearchSystem };

// –î–æ–¥–∞—î–º–æ –≤ window –¥–ª—è –¥–æ—Å—Ç—É–ø—É –∑ –∫–æ–Ω—Å–æ–ª—ñ
window.initializeSearchEngine = initializeSearchEngine;
window.reinitializeSearchSystem = reinitializeSearchSystem;

// –õ–æ–≥—É–≤–∞–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —É—Ç–∏–ª—ñ—Ç—ñ–≤
setTimeout(() => {
    console.log('üìö COMSPEC SEARCH UTILITIES –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–û');
    console.log('üí° –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:');
    console.log('  window.diagnoseSearchSystem() - –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞');
    console.log('  window.comspecSearchUtils.quickTest() - —à–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç');
    console.log('  window.comspecSearchUtils.demo() - –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è');
    console.log('  window.comspecSearchUtils.fix() - –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º');
    console.log('  window.comspecSearchUtils.restart() - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º–∏');
    console.log('  window.comspecSearchUtils.exportStats() - –µ–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    console.log('  window.comspecSearchUtils.testSearch("–∑–∞–ø–∏—Ç") - —Ç–µ—Å—Ç –ø–æ—à—É–∫—É');
    console.log('  window.comspecSearchUtils.analyzeContext() - –∞–Ω–∞–ª—ñ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É');
    console.log('  window.comspecSearchUtils.fullDiagnosis() - –ø–æ–≤–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞');
}, 100);

export default initializeSearchEngine;