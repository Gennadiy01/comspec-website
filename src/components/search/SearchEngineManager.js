// SearchEngineManager.js
// –í–µ—Ä—Å—ñ—è 2.0 - –¶–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –ø–æ—à—É–∫–æ–º –∑ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—î—é –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
// üéØ –ï—Ç–∞–ø 4: –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ

import { getAllStaticData, getQuickSearchData, getPopularTags, getDynamicScanConfig, getContextPatterns } from '../../data/UnifiedSearchIndex.js';

/**
 * üöÄ COMSPEC Search Engine Manager v2.0
 * –¶–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è –≤—Å—ñ–º–∞ —Ç–∏–ø–∞–º–∏ –ø–æ—à—É–∫—É
 * –û–±'—î–¥–Ω—É—î –ª–æ–≥—ñ–∫—É HybridSearchEngine —Ç–∞ QuickSearch –∑ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—î—é –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
 * 
 * ‚ú® –ù–æ–≤—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –µ—Ç–∞–ø—É 4:
 * - –ö–µ—à—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –∑ TTL
 * - –Ü–Ω–¥–µ–∫—Å—É–≤–∞–Ω–Ω—è –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –ø–æ—à—É–∫—É
 * - –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
 * - –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤
 */
class SearchEngineManager {
  constructor() {
    this.staticIndex = new Map();
    this.dynamicIndex = new Map();
    this.contextualIndex = new Map();
    this.quickSearchData = null;
    this.popularTags = null;
    this.isInitialized = false;
    
    // üÜï –°–∏—Å—Ç–µ–º–∞ –∫–µ—à—É–≤–∞–Ω–Ω—è (–ï—Ç–∞–ø 4)
    this.cache = new Map();
    this.cacheConfig = {
      maxSize: 100,           // –ú–∞–∫—Å–∏–º—É–º 100 –∑–∞–∫–µ—à–æ–≤–∞–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
      ttl: 300000,           // TTL 5 —Ö–≤–∏–ª–∏–Ω
      enabled: true          // Feature flag –¥–ª—è –∫–µ—à—É–≤–∞–Ω–Ω—è
    };
    
    // üÜï –Ü–Ω–¥–µ–∫—Å –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –ø–æ—à—É–∫—É (–ï—Ç–∞–ø 4)
    this.searchIndex = new Map();
    this.triggerIndex = new Map(); // –Ü–Ω–¥–µ–∫—Å –ø–æ –ø–µ—Ä—à–∏—Ö 2-3 —Å–∏–º–≤–æ–ª–∞—Ö
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    this.stats = {
      staticIndex: 0,
      dynamicIndex: 0,
      totalRecords: 0,
      quickSearchRecords: 0,
      popularTags: 0,
      lastUpdateTime: null,
      // üÜï –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ (–ï—Ç–∞–ø 4)
      performance: {
        totalSearches: 0,
        cacheHits: 0,
        cacheMisses: 0,
        avgSearchTime: 0,
        searchTimes: []
      }
    };
    
    // –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∑ UnifiedSearchIndex
    this.config = getDynamicScanConfig();
    this.contextPatterns = getContextPatterns();
    
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
    this.initialize();
    
    console.log('üöÄ SearchEngineManager v2.0 —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –∑ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—î—é –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ');
  }

  /**
   * üöÄ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
   */
  async initialize() {
    try {
      // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å—Ç–∞—Ç–∏—á–Ω—ñ –¥–∞–Ω—ñ
      await this.loadStaticData();
      
      // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ —à–≤–∏–¥–∫–æ–≥–æ –ø–æ—à—É–∫—É
      await this.loadQuickSearchData();
      
      // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–æ–ø—É–ª—è—Ä–Ω—ñ —Ç–µ–≥–∏
      await this.loadPopularTags();
      
      // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –¥–∏–Ω–∞–º—ñ—á–Ω–∏–π —ñ–Ω–¥–µ–∫—Å —è–∫—â–æ —î DOM
      if (typeof document !== 'undefined') {
        await this.initializeDynamicIndex();
      }
      
      this.isInitialized = true;
      this.stats.lastUpdateTime = new Date().toISOString();
      
      // üÜï –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —ñ–Ω–¥–µ–∫—Å—É–≤–∞–Ω–Ω—è –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –ø–æ—à—É–∫—É (–ï—Ç–∞–ø 4)
      await this.buildSearchIndex();
      
      console.log('‚úÖ SearchEngineManager —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ:', this.getStats());
      
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó SearchEngineManager:', error);
    }
  }

  // üÜï ===== –ú–ï–¢–û–î–ò –ö–ï–®–£–í–ê–ù–ù–Ø (–ï—Ç–∞–ø 4) =====
  
  /**
   * üóÑÔ∏è –û—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑ –∫–µ—à—É
   */
  getCacheKey(query, options) {
    return `${query.toLowerCase()}:${JSON.stringify(options)}`;
  }

  /**
   * üóÑÔ∏è –û—Ç—Ä–∏–º–∞—Ç–∏ –∑ –∫–µ—à—É
   */
  getFromCache(cacheKey) {
    if (!this.cacheConfig.enabled) return null;

    const entry = this.cache.get(cacheKey);
    if (!entry) return null;

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ TTL
    if (Date.now() - entry.timestamp > this.cacheConfig.ttl) {
      this.cache.delete(cacheKey);
      return null;
    }

    this.stats.performance.cacheHits++;
    return entry.results;
  }

  /**
   * üóÑÔ∏è –ó–±–µ—Ä–µ–≥—Ç–∏ –≤ –∫–µ—à
   */
  saveToCache(cacheKey, results) {
    if (!this.cacheConfig.enabled) return;

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–∑–º—ñ—Ä—É –∫–µ—à—É
    if (this.cache.size >= this.cacheConfig.maxSize) {
      // –í–∏–¥–∞–ª—è—î–º–æ –Ω–∞–π—Å—Ç–∞—Ä—à–∏–π –∑–∞–ø–∏—Å
      const oldestKey = this.cache.keys().next().value;
      this.cache.delete(oldestKey);
    }

    this.cache.set(cacheKey, {
      results: results,
      timestamp: Date.now()
    });
  }

  /**
   * üßπ –û—á–∏—Å—Ç–∏—Ç–∏ –∫–µ—à
   */
  clearCache() {
    this.cache.clear();
    console.log('üßπ –ö–µ—à –æ—á–∏—â–µ–Ω–æ');
  }

  /**
   * üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à—É (–≤–∏–ø—Ä–∞–≤–ª–µ–Ω–∞)
   */
  getCacheStats() {
    const totalSearches = this.stats.performance.totalSearches;
    const cacheHits = this.stats.performance.cacheHits;
    const cacheMisses = this.stats.performance.cacheMisses;
    
    // –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ hitRate
    const hitRate = totalSearches > 0 
      ? Math.min((cacheHits / totalSearches * 100), 100).toFixed(2) + '%'
      : '0%';
    
    return {
      size: this.cache.size,
      maxSize: this.cacheConfig.maxSize,
      hitRate,
      enabled: this.cacheConfig.enabled,
      // –î–æ–¥–∞—Ç–∫–æ–≤–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
      debug: {
        totalSearches,
        cacheHits,
        cacheMisses,
        calculation: `${cacheHits}/${totalSearches} = ${hitRate}`
      }
    };
  }

  // üÜï ===== –ú–ï–¢–û–î–ò –Ü–ù–î–ï–ö–°–£–í–ê–ù–ù–Ø (–ï—Ç–∞–ø 4) =====

  /**
   * üîç –ü–æ–±—É–¥—É–≤–∞—Ç–∏ —ñ–Ω–¥–µ–∫—Å –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –ø–æ—à—É–∫—É
   */
  async buildSearchIndex() {
    console.log('üîç –ü–æ–±—É–¥–æ–≤–∞ —ñ–Ω–¥–µ–∫—Å—É –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –ø–æ—à—É–∫—É...');
    
    try {
      // –û—á–∏—â—É—î–º–æ —ñ—Å–Ω—É—é—á—ñ —ñ–Ω–¥–µ–∫—Å–∏
      this.searchIndex.clear();
      this.triggerIndex.clear();

      // –Ü–Ω–¥–µ–∫—Å—É—î–º–æ —Å—Ç–∞—Ç–∏—á–Ω—ñ –¥–∞–Ω—ñ
      for (const item of this.staticIndex.values()) {
        this.addToSearchIndex(item);
      }

      // –Ü–Ω–¥–µ–∫—Å—É—î–º–æ –¥–∞–Ω—ñ —à–≤–∏–¥–∫–æ–≥–æ –ø–æ—à—É–∫—É
      if (this.quickSearchData) {
        for (const item of this.quickSearchData) {
          this.addToSearchIndex(item);
        }
      }

      console.log(`‚úÖ –Ü–Ω–¥–µ–∫—Å –ø–æ–±—É–¥–æ–≤–∞–Ω–æ: ${this.searchIndex.size} –∑–∞–ø–∏—Å—ñ–≤, ${this.triggerIndex.size} —Ç—Ä–∏–≥–µ—Ä—ñ–≤`);

    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ–±—É–¥–æ–≤–∏ —ñ–Ω–¥–µ–∫—Å—É:', error);
    }
  }

  /**
   * üìù –î–æ–¥–∞—Ç–∏ –µ–ª–µ–º–µ–Ω—Ç –¥–æ —ñ–Ω–¥–µ–∫—Å—É
   */
  addToSearchIndex(item) {
    if (!item.title && !item.content) return;

    const text = [
      item.title || '',
      item.content || '',
      item.category || '',
      ...(item.keywords || [])
    ].join(' ').toLowerCase();

    const words = text.split(/\s+/).filter(word => word.length >= 2);

    // –î–æ–¥–∞—î–º–æ –¥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —ñ–Ω–¥–µ–∫—Å—É
    for (const word of words) {
      if (!this.searchIndex.has(word)) {
        this.searchIndex.set(word, new Set());
      }
      this.searchIndex.get(word).add(item.id || item.title);
    }

    // –î–æ–¥–∞—î–º–æ –¥–æ —Ç—Ä–∏–≥–µ—Ä–Ω–æ–≥–æ —ñ–Ω–¥–µ–∫—Å—É (–ø–µ—Ä—à—ñ 2-3 —Å–∏–º–≤–æ–ª–∏)
    for (const word of words) {
      if (word.length >= 2) {
        const trigger = word.substring(0, 3);
        if (!this.triggerIndex.has(trigger)) {
          this.triggerIndex.set(trigger, new Set());
        }
        this.triggerIndex.get(trigger).add(item.id || item.title);
      }
    }
  }

  /**
   * üìä –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö
   */
  async loadStaticData() {
    try {
      const staticData = getAllStaticData();
      
      staticData.forEach(item => {
        const searchableContent = this.createSearchableContent(item);
        this.staticIndex.set(item.id, {
          ...item,
          searchableContent,
          context: this.detectContext(searchableContent),
          weight: this.calculateWeight(item)
        });
      });
      
      this.stats.staticIndex = this.staticIndex.size;
      console.log(`üìä –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${this.stats.staticIndex} —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤`);
      
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö:', error);
      throw error;
    }
  }

  /**
   * ‚ö° –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —à–≤–∏–¥–∫–æ–≥–æ –ø–æ—à—É–∫—É
   */
  async loadQuickSearchData() {
    try {
      this.quickSearchData = getQuickSearchData();
      this.stats.quickSearchRecords = this.quickSearchData.length;
      console.log(`‚ö° –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${this.stats.quickSearchRecords} –∑–∞–ø–∏—Å—ñ–≤ —à–≤–∏–¥–∫–æ–≥–æ –ø–æ—à—É–∫—É`);
      
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —à–≤–∏–¥–∫–æ–≥–æ –ø–æ—à—É–∫—É:', error);
      throw error;
    }
  }

  /**
   * üè∑Ô∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–ø—É–ª—è—Ä–Ω–∏—Ö —Ç–µ–≥—ñ–≤
   */
  async loadPopularTags() {
    try {
      this.popularTags = getPopularTags();
      this.stats.popularTags = this.popularTags.length;
      console.log(`üè∑Ô∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${this.stats.popularTags} –ø–æ–ø—É–ª—è—Ä–Ω–∏—Ö —Ç–µ–≥—ñ–≤`);
      
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–ø—É–ª—è—Ä–Ω–∏—Ö —Ç–µ–≥—ñ–≤:', error);
      throw error;
    }
  }

  /**
   * üîÑ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–∏–Ω–∞–º—ñ—á–Ω–æ–≥–æ —ñ–Ω–¥–µ–∫—Å—É
   */
  async initializeDynamicIndex() {
    try {
      if (!document) return;
      
      const elements = this.scanDynamicContent();
      
      elements.forEach((element, index) => {
        const id = `dynamic-${index}`;
        const content = this.extractElementContent(element);
        
        if (content && content.length >= this.config.config.minTextLength) {
          this.dynamicIndex.set(id, {
            id,
            type: 'dynamic',
            content,
            element,
            context: this.detectContext(content),
            weight: this.calculateElementWeight(element)
          });
        }
      });
      
      this.stats.dynamicIndex = this.dynamicIndex.size;
      console.log(`üîÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${this.stats.dynamicIndex} –¥–∏–Ω–∞–º—ñ—á–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤`);
      
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –¥–∏–Ω–∞–º—ñ—á–Ω–æ–≥–æ —ñ–Ω–¥–µ–∫—Å—É:', error);
    }
  }

  /**
   * üöÄ –û—Å–Ω–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥ –ø–æ—à—É–∫—É (–æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π - –ï—Ç–∞–ø 4)
   */
  search(query, options = {}) {
    if (!this.isInitialized) {
      console.warn('‚ö†Ô∏è SearchEngineManager –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
      return [];
    }

    const {
      type = 'hybrid',        // 'quick', 'static', 'dynamic', 'hybrid'
      limit = 10,
      includeContext = true,
      sortBy = 'relevance'
    } = options;

    // üÜï –ì–µ–Ω–µ—Ä—É—î–º–æ –∫–ª—é—á –¥–ª—è –∫–µ—à—É (–ï—Ç–∞–ø 4)
    const cacheKey = this.getCacheKey(query, { type, limit, includeContext, sortBy });
    
    // üÜï –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑ –∫–µ—à—É (–ï—Ç–∞–ø 4)
    const cachedResults = this.getFromCache(cacheKey);
    if (cachedResults) {
      console.log(`üóÑÔ∏è –ö–µ—à HIT –¥–ª—è "${query}" (${type})`);
      return cachedResults;
    }

    this.stats.performance.cacheMisses++;
    const startTime = performance.now();
    let results = [];

    try {
      switch (type) {
        case 'quick':
          results = this.quickSearch(query, limit);
          break;
        case 'static':
          results = this.staticSearch(query, limit);
          break;
        case 'dynamic':
          results = this.dynamicSearch(query, limit);
          break;
        case 'hybrid':
        default:
          results = this.hybridSearch(query, limit);
          break;
      }

      // –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
      results = this.sortResults(results, sortBy, query);

      // –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
      if (includeContext) {
        results = this.addContextToResults(results, query);
      }

      const endTime = performance.now();
      const searchTime = endTime - startTime;

      // üÜï –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ (–ï—Ç–∞–ø 4)
      this.updatePerformanceStats(searchTime);

      // üÜï –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–µ—à (–ï—Ç–∞–ø 4)
      this.saveToCache(cacheKey, results);

      console.log(`üîç –ü–æ—à—É–∫ "${query}" (${type}): ${results.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –∑–∞ ${searchTime.toFixed(2)}ms`);

      return results;

    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É:', error);
      return [];
    }
  }

  /**
   * üìä –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
   */
  updatePerformanceStats(searchTime) {
    this.stats.performance.totalSearches++;
    this.stats.performance.searchTimes.push(searchTime);

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –æ—Å—Ç–∞–Ω–Ω—ñ 100 –∑–∞–ø–∏—Å—ñ–≤
    if (this.stats.performance.searchTimes.length > 100) {
      this.stats.performance.searchTimes.shift();
    }

    // –û–±—á–∏—Å–ª—é—î–º–æ —Å–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å
    const sum = this.stats.performance.searchTimes.reduce((a, b) => a + b, 0);
    this.stats.performance.avgSearchTime = sum / this.stats.performance.searchTimes.length;
  }

  /**
   * ‚ö° –®–≤–∏–¥–∫–∏–π –ø–æ—à—É–∫
   */
  quickSearch(query, limit = 10) {
    if (!this.quickSearchData) return [];

    const searchText = query.toLowerCase();
    const results = [];

    for (const item of this.quickSearchData) {
      const score = this.calculateQuickSearchScore(item, searchText);
      if (score > 0) {
        results.push({
          ...item,
          score,
          type: 'quick'
        });
      }
    }

    return results
      .sort((a, b) => b.score - a.score)
      .slice(0, limit);
  }

  /**
   * üìä –°—Ç–∞—Ç–∏—á–Ω–∏–π –ø–æ—à—É–∫
   */
  staticSearch(query, limit = 10) {
    const searchText = query.toLowerCase();
    const results = [];

    for (const item of this.staticIndex.values()) {
      const score = this.calculateStaticSearchScore(item, searchText);
      if (score > 0) {
        results.push({
          ...item,
          score,
          type: 'static'
        });
      }
    }

    return results
      .sort((a, b) => b.score - a.score)
      .slice(0, limit);
  }

  /**
   * üîÑ –î–∏–Ω–∞–º—ñ—á–Ω–∏–π –ø–æ—à—É–∫
   */
  dynamicSearch(query, limit = 10) {
    const searchText = query.toLowerCase();
    const results = [];

    for (const item of this.dynamicIndex.values()) {
      const score = this.calculateDynamicSearchScore(item, searchText);
      if (score > 0) {
        results.push({
          ...item,
          score,
          type: 'dynamic'
        });
      }
    }

    return results
      .sort((a, b) => b.score - a.score)
      .slice(0, limit);
  }

  /**
   * üéØ –ì—ñ–±—Ä–∏–¥–Ω–∏–π –ø–æ—à—É–∫ (–∫–æ–º–±—ñ–Ω–æ–≤–∞–Ω–∏–π)
   */
  hybridSearch(query, limit = 10) {
    const results = [];
    
    // –û—Ç—Ä–∏–º—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑ —É—Å—ñ—Ö –¥–∂–µ—Ä–µ–ª
    const quickResults = this.quickSearch(query, Math.ceil(limit * 0.3));
    const staticResults = this.staticSearch(query, Math.ceil(limit * 0.5));
    const dynamicResults = this.dynamicSearch(query, Math.ceil(limit * 0.2));
    
    // –û–±'—î–¥–Ω—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
    results.push(...quickResults);
    results.push(...staticResults);
    results.push(...dynamicResults);
    
    // –í–∏–¥–∞–ª—è—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏
    const uniqueResults = this.removeDuplicates(results);
    
    return uniqueResults
      .sort((a, b) => b.score - a.score)
      .slice(0, limit);
  }

  /**
   * üìä –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –æ—á–æ–∫ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –ø–æ—à—É–∫—É
   */
  calculateQuickSearchScore(item, searchText) {
    let score = 0;
    
    // –¢–æ—á–Ω–µ —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è –≤ –∑–∞–≥–æ–ª–æ–≤–∫—É
    if (item.title.toLowerCase() === searchText) {
      score += 100;
    }
    
    // –°–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è –≤ –∑–∞–≥–æ–ª–æ–≤–∫—É
    if (item.title.toLowerCase().includes(searchText)) {
      score += 80;
    }
    
    // –°–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è –≤ –∫–æ–Ω—Ç–µ–Ω—Ç—ñ
    if (item.content.toLowerCase().includes(searchText)) {
      score += 60;
    }
    
    // –°–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è –≤ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª–æ–≤–∞—Ö
    if (item.keywords?.some(keyword => keyword.toLowerCase().includes(searchText))) {
      score += 40;
    }
    
    return score;
  }

  /**
   * üìä –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –æ—á–æ–∫ –¥–ª—è —Å—Ç–∞—Ç–∏—á–Ω–æ–≥–æ –ø–æ—à—É–∫—É
   */
  calculateStaticSearchScore(item, searchText) {
    let score = 0;
    
    // –ë–∞–∑–æ–≤–∏–π –ø–æ—à—É–∫ –≤ –∫–æ–Ω—Ç–µ–Ω—Ç—ñ
    if (item.searchableContent?.toLowerCase().includes(searchText)) {
      score += 50;
    }
    
    // –î–æ–¥–∞—Ç–∫–æ–≤—ñ –æ—á–∫–∏ –∑–∞ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç—É
    if (item.context) {
      score += item.context.length * 10;
    }
    
    // –í–∞–≥–∞ –µ–ª–µ–º–µ–Ω—Ç–∞
    if (item.weight) {
      score += item.weight * 5;
    }
    
    return score;
  }

  /**
   * üìä –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –æ—á–æ–∫ –¥–ª—è –¥–∏–Ω–∞–º—ñ—á–Ω–æ–≥–æ –ø–æ—à—É–∫—É
   */
  calculateDynamicSearchScore(item, searchText) {
    let score = 0;
    
    // –ë–∞–∑–æ–≤–∏–π –ø–æ—à—É–∫ –≤ –∫–æ–Ω—Ç–µ–Ω—Ç—ñ
    if (item.content.toLowerCase().includes(searchText)) {
      score += 30;
    }
    
    // –î–æ–¥–∞—Ç–∫–æ–≤—ñ –æ—á–∫–∏ –∑–∞ –≤–∞–≥—É –µ–ª–µ–º–µ–Ω—Ç–∞
    if (item.weight) {
      score += item.weight * 3;
    }
    
    return score;
  }

  /**
   * üîß –î–æ–ø–æ–º—ñ–∂–Ω—ñ –º–µ—Ç–æ–¥–∏
   */
  
  createSearchableContent(item) {
    return [
      item.title,
      item.content,
      item.category,
      item.page,
      ...(item.keywords || [])
    ].filter(Boolean).join(' ');
  }

  detectContext(content) {
    const contexts = [];
    
    for (const [contextType, patterns] of Object.entries(this.contextPatterns)) {
      if (patterns.some(pattern => pattern.test(content))) {
        contexts.push(contextType);
      }
    }
    
    return contexts;
  }

  calculateWeight(item) {
    let weight = 1;
    
    // –í–∞–≥–∞ –ø–æ —Ç–∏–ø—É
    if (item.type === 'product') weight += 3;
    if (item.type === 'service') weight += 2;
    if (item.type === 'contact') weight += 4;
    
    return weight;
  }

  calculateElementWeight(element) {
    const tagName = element.tagName.toLowerCase();
    return this.config.contentWeights[tagName] || 1;
  }

  scanDynamicContent() {
    const elements = [];
    
    for (const [selectorType, selector] of Object.entries(this.config.selectors)) {
      try {
        const found = document.querySelectorAll(selector);
        elements.push(...Array.from(found));
      } catch (error) {
        console.warn(`‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è ${selectorType}:`, error);
      }
    }
    
    return elements;
  }

  extractElementContent(element) {
    return element.textContent?.trim() || element.innerText?.trim() || '';
  }

  sortResults(results, sortBy, query) {
    switch (sortBy) {
      case 'relevance':
        return results.sort((a, b) => b.score - a.score);
      case 'type':
        return results.sort((a, b) => a.type.localeCompare(b.type));
      case 'alphabetical':
        return results.sort((a, b) => a.title?.localeCompare(b.title) || 0);
      default:
        return results;
    }
  }

  addContextToResults(results, query) {
    return results.map(result => ({
      ...result,
      highlightedContent: this.highlightSearchTerms(result.content || result.title, query)
    }));
  }

  highlightSearchTerms(text, query) {
    if (!text || !query) return text;
    
    const regex = new RegExp(`(${query.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')})`, 'gi');
    return text.replace(regex, '<mark>$1</mark>');
  }

  removeDuplicates(results) {
    const seen = new Set();
    return results.filter(result => {
      const key = result.id || result.title;
      if (seen.has(key)) return false;
      seen.add(key);
      return true;
    });
  }

  /**
   * üìä –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Ä–æ–∑—à–∏—Ä–µ–Ω–∞ - –ï—Ç–∞–ø 4)
   */
  getStats() {
    this.stats.totalRecords = this.stats.staticIndex + this.stats.dynamicIndex;
    
    return {
      ...this.stats,
      isInitialized: this.isInitialized,
      version: '2.0.0',
      // üÜï –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à—É–≤–∞–Ω–Ω—è —Ç–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ (–ï—Ç–∞–ø 4)
      cache: this.getCacheStats(),
      indexing: {
        searchIndexSize: this.searchIndex.size,
        triggerIndexSize: this.triggerIndex.size,
        indexingEnabled: true
      },
      performance: {
        ...this.stats.performance,
        avgSearchTimeFormatted: `${this.stats.performance.avgSearchTime.toFixed(2)}ms`,
        cacheHitRate: this.stats.performance.totalSearches > 0 
          ? `${((this.stats.performance.cacheHits / this.stats.performance.totalSearches) * 100).toFixed(2)}%`
          : '0%'
      }
    };
  }

  /**
   * üè∑Ô∏è –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–ø—É–ª—è—Ä–Ω–∏—Ö —Ç–µ–≥—ñ–≤
   */
  getPopularTags() {
    return this.popularTags || [];
  }

  /**
   * üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—É
   */
  async refresh() {
    console.log('üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è SearchEngineManager...');
    
    // –û—á–∏—â—É—î–º–æ —ñ–Ω–¥–µ–∫—Å–∏
    this.staticIndex.clear();
    this.dynamicIndex.clear();
    
    // –ü–æ–≤—Ç–æ—Ä–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
    await this.initialize();
    
    console.log('‚úÖ SearchEngineManager –æ–Ω–æ–≤–ª–µ–Ω–æ');
  }

  /**
   * üßπ –û—á–∏—â–µ–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤
   */
  destroy() {
    this.staticIndex.clear();
    this.dynamicIndex.clear();
    this.contextualIndex.clear();
    this.quickSearchData = null;
    this.popularTags = null;
    this.isInitialized = false;
    
    console.log('üßπ SearchEngineManager –∑–Ω–∏—â–µ–Ω–æ');
  }
}

// –°—Ç–≤–æ—Ä—é—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä
const searchEngineManager = new SearchEngineManager();

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
export default searchEngineManager;
export { SearchEngineManager };

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –º–µ—Ç–æ–¥–∏ –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
export const quickSearch = (query, limit) => searchEngineManager.quickSearch(query, limit);
export const hybridSearch = (query, limit) => searchEngineManager.hybridSearch(query, limit);
export const getStats = () => searchEngineManager.getStats();
export const getPopularSearchTags = () => searchEngineManager.getPopularTags();

// –ì–ª–æ–±–∞–ª—å–Ω–∏–π –¥–æ—Å—Ç—É–ø –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
if (typeof window !== 'undefined') {
  window.searchEngineManager = searchEngineManager;
  window.SearchEngineManager = SearchEngineManager;
}

console.log('üì¶ SearchEngineManager –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —Ç–∞ –≥–æ—Ç–æ–≤–∏–π –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è');