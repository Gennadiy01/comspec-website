// src/components/search/SearchHighlighting.js
// –ì—ñ–±—Ä–∏–¥–Ω–∞ –≤–µ—Ä—Å—ñ—è: –Ω–∞–π–∫—Ä–∞—â–µ –∑ –æ–±–æ—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤
// –í–µ—Ä—Å—ñ—è: 2.0.0

class SearchHighlighting {
    constructor() {
        this.highlightClass = 'comspec-search-highlight';
        this.currentHighlights = [];
        this.isInitialized = false;
        
        this.init();
    }
    
    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏ –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è
     */
    init() {
        try {
            this.initializeStyles();
            this.setupGlobalFunctions();
            this.setupKeyboardShortcuts();
            this.isInitialized = true;
            // console.log('üé® SearchHighlighting —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó SearchHighlighting:', error);
        }
    }
    
    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç–∏–ª—ñ–≤ –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è (–∑ –≤–∞—à–æ–≥–æ —Ñ–∞–π–ª—É + –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è)
     */
    initializeStyles() {
        const styleId = 'comspec-search-highlighting-styles';
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Å—Ç–∏–ª—ñ –≤–∂–µ –¥–æ–¥–∞–Ω—ñ
        if (document.getElementById(styleId)) {
            return;
        }
        
        const style = document.createElement('style');
        style.id = styleId;
        style.textContent = `
            .${this.highlightClass} {
                background: #ffeb3b !important;
                padding: 2px 4px !important;
                border-radius: 3px !important;
                font-weight: 600 !important;
                animation: comspec-pulse 1s ease-in-out !important;
                box-shadow: 0 0 0 2px rgba(255, 235, 59, 0.3) !important;
                color: #000 !important;
                transition: all 0.3s ease !important;
            }
            
            .${this.highlightClass}:hover {
                background: #ffcc00 !important;
                transform: scale(1.05) !important;
            }
            
            .${this.highlightClass}.phone {
                background: #03a9f4 !important;
                color: white !important;
                box-shadow: 0 0 0 2px rgba(3, 169, 244, 0.3) !important;
            }
            
            .${this.highlightClass}.address {
                background: #ff9800 !important;
                color: white !important;
                box-shadow: 0 0 0 2px rgba(255, 152, 0, 0.3) !important;
            }
            
            .${this.highlightClass}.email {
                background: #2196f3 !important;
                color: white !important;
                box-shadow: 0 0 0 2px rgba(33, 150, 243, 0.3) !important;
            }
            
            .comspec-search-focus {
                outline: 3px solid #008080 !important;
                outline-offset: 5px !important;
                border-radius: 5px !important;
                transition: all 0.3s ease !important;
            }
            
            .comspec-search-counter {
                position: fixed !important;
                top: 10px !important;
                right: 10px !important;
                background: #008080 !important;
                color: white !important;
                padding: 8px 16px !important;
                border-radius: 20px !important;
                font-size: 14px !important;
                font-weight: bold !important;
                z-index: 10000 !important;
                box-shadow: 0 4px 15px rgba(0,0,0,0.2) !important;
                animation: slideInRight 0.3s ease !important;
            }
            
            @keyframes comspec-pulse {
                0%, 100% { 
                    background: #ffeb3b !important; 
                    transform: scale(1);
                }
                50% { 
                    background: #ff9800 !important; 
                    transform: scale(1.05);
                }
            }
            
            @keyframes slideInRight {
                from {
                    transform: translateX(100%);
                    opacity: 0;
                }
                to {
                    transform: translateX(0);
                    opacity: 1;
                }
            }
        `;
        document.head.appendChild(style);
        // console.log('üé® –°—Ç–∏–ª—ñ –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
    }

    /**
     * –¢–æ—á–Ω–µ –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è —Ç–µ—Ä–º—ñ–Ω—ñ–≤ –≤ –µ–ª–µ–º–µ–Ω—Ç—ñ (–∑ –≤–∞—à–æ–≥–æ —Ñ–∞–π–ª—É + –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è)
     */
    highlightTermInElement(element, term, contextType = null) {
        if (!element || !term) {
            console.warn('‚ö†Ô∏è –í—ñ–¥—Å—É—Ç–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç –∞–±–æ —Ç–µ—Ä–º—ñ–Ω –¥–ª—è –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è');
            return false;
        }
        
        // console.log(`üé® –ü—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è —Ç–µ—Ä–º—ñ–Ω—É "${term}" –≤ –µ–ª–µ–º–µ–Ω—Ç—ñ:`, element.tagName, element.className);
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –µ–ª–µ–º–µ–Ω—Ç –º—ñ—Å—Ç–∏—Ç—å —Ç–µ—Ä–º—ñ–Ω
        if (!element.textContent.toLowerCase().includes(term.toLowerCase())) {
            // console.log(`‚ö†Ô∏è –ï–ª–µ–º–µ–Ω—Ç –Ω–µ –º—ñ—Å—Ç–∏—Ç—å —Ç–µ—Ä–º—ñ–Ω "${term}"`);
            return false;
        }
        
        const highlighted = this.highlightInTextNodes(element, term, contextType);
        
        if (highlighted) {
            // –î–æ–¥–∞—î–º–æ –¥–æ –º–∞—Å–∏–≤—É –ø–æ—Ç–æ—á–Ω–∏—Ö –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω—å
            const highlights = element.querySelectorAll(`.${this.highlightClass}`);
            this.currentHighlights.push(...Array.from(highlights));
        }
        
        return highlighted;
    }

    /**
     * –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –≤—É–∑–ª—ñ–≤ (–ø–æ–∫—Ä–∞—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è)
     */
    highlightInTextNodes(node, searchTerm, contextType = null) {
        if (node.nodeType === Node.TEXT_NODE) {
            const text = node.textContent;
            const regex = new RegExp(`(${searchTerm.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')})`, 'gi');
            
            if (regex.test(text)) {
                const contextClass = contextType ? ` ${contextType}` : '';
                const highlightedHTML = text.replace(regex, 
                    `<span class="${this.highlightClass}${contextClass}" data-search-highlight="true">$1</span>`
                );
                
                const tempDiv = document.createElement('div');
                tempDiv.innerHTML = highlightedHTML;
                
                // –ó–∞–º—ñ–Ω—é—î–º–æ —Ç–µ–∫—Å—Ç–æ–≤–∏–π –≤—É–∑–æ–ª –Ω–∞ –ø—ñ–¥—Å–≤—ñ—á–µ–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏
                const parent = node.parentNode;
                if (parent) {
                    while (tempDiv.firstChild) {
                        parent.insertBefore(tempDiv.firstChild, node);
                    }
                    parent.removeChild(node);
                }
                return true;
            }
        } else if (node.nodeType === Node.ELEMENT_NODE && 
                   !node.classList.contains(this.highlightClass)) {
            // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–æ–±–ª—è—î–º–æ –¥–æ—á—ñ—Ä–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏
            let highlighted = false;
            const children = Array.from(node.childNodes);
            children.forEach(child => {
                if (this.highlightInTextNodes(child, searchTerm, contextType)) {
                    highlighted = true;
                }
            });
            return highlighted;
        }
        return false;
    }

    /**
     * –ù–∞–≤—ñ–≥–∞—Ü—ñ—è –¥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –∑ –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è–º (–ø–æ–∫—Ä–∞—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è –∑ —Ç–æ—á–Ω–∏–º –∑–±—ñ–≥–æ–º)
     */
    scrollToElementWithHighlight(selector, term, context = null, directElement = null, exactTitle = null) {
        // console.log(`üéØ scrollToElementWithHighlight –≤–∏–∫–ª–∏–∫–∞–Ω–æ:`, {selector, term, context, exactTitle});
        
        // –û—á–∏—â–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è
        this.clearHighlights();
        
        let targetElement = directElement;
        if (!targetElement) {
            targetElement = this.findElement(selector, term, exactTitle);
        }
        
        if (!targetElement) {
            // console.log(`‚ùå –ï–ª–µ–º–µ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞: ${selector}, term: ${term}, exactTitle: ${exactTitle}`);
            return false;
        }

        // –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è
        const highlighted = this.applyHighlighting(targetElement, term, context);
        
        // –ü—Ä–æ–∫—Ä—É—á—É—î–º–æ –¥–æ –µ–ª–µ–º–µ–Ω—Ç–∞
        this.scrollToElement(targetElement);
        
        // –ü–æ–∫–∞–∑—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫
        if (highlighted && this.currentHighlights.length > 0) {
            this.showHighlightCounter(this.currentHighlights.length, term);
        }
        
        // console.log(`‚úÖ –ù–∞–≤—ñ–≥–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è: ${highlighted ? '–∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ' : '–Ω–µ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ'}`);
        
        return {
            element: targetElement,
            highlighted: highlighted,
            selector: selector,
            term: term,
            highlightCount: this.currentHighlights.length
        };
    }

    /**
     * –ü–æ—à—É–∫ –µ–ª–µ–º–µ–Ω—Ç–∞ –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º —Ç–æ—á–Ω–æ–≥–æ –∑–±—ñ–≥—É
     */
    findElement(selector, term, exactTitle = null) {
        const searchMethods = [
            // –í–∞—à—ñ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—ñ –º–µ—Ç–æ–¥–∏
            () => document.querySelector(selector),
            () => document.getElementById(selector.replace('#', '')),
            () => document.querySelector(`[data-section="${selector.replace('#', '')}"]`),
            () => document.querySelector(`[id*="${selector.replace('#', '')}"]`),
            
            // –ü–æ–∫—Ä–∞—â–µ–Ω—ñ –º–µ—Ç–æ–¥–∏ –∑ —Ç–æ—á–Ω–∏–º –∑–±—ñ–≥–æ–º
            () => document.querySelector(`[class*="${selector.replace('.', '')}"]`),
            
            // –ù–æ–≤–∏–π –ø—ñ–¥—Ö—ñ–¥: —Å–ø–æ—á–∞—Ç–∫—É —à—É–∫–∞—î–º–æ —Ç–æ—á–Ω–∏–π –∑–±—ñ–≥ –∑–∞–≥–æ–ª–æ–≤–∫—É
            () => {
                if (exactTitle) {
                    const headings = Array.from(document.querySelectorAll('h1, h2, h3, h4, h5, h6'));
                    return headings.find(el => 
                        el.textContent.trim().toLowerCase() === exactTitle.toLowerCase()
                    );
                }
                return null;
            },
            
            () => {
                if (exactTitle) {
                    const elements = Array.from(document.querySelectorAll('p, div, span, article, section, .product-card h3, .card-title'));
                    return elements.find(el => 
                        el.textContent.trim().toLowerCase() === exactTitle.toLowerCase()
                    );
                }
                return null;
            },
            
            // –ü–æ—à—É–∫ –∑ –≤–∏—Å–æ–∫–æ—é –ø–æ–¥—ñ–±–Ω—ñ—Å—Ç—é (—è–∫—â–æ —Ç–æ—á–Ω–∏–π –∑–±—ñ–≥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ)
            () => {
                const headings = Array.from(document.querySelectorAll('h1, h2, h3, h4, h5, h6'));
                return this.findBestMatchingElement(headings, term, exactTitle);
            },
            
            () => {
                const elements = Array.from(document.querySelectorAll('p, div, span, article, section, .product-card, .card'));
                return this.findBestMatchingElement(elements, term, exactTitle);
            },
            
            // –ü–æ—à—É–∫ –ø–æ –∞—Ç—Ä–∏–±—É—Ç–∞—Ö (–∑–∞–ª–∏—à–∞—î–º–æ —è–∫ fallback)
            () => {
                const elements = Array.from(document.querySelectorAll('[title], [alt], [aria-label]'));
                return elements.find(el => {
                    const searchText = (el.title || el.alt || el.getAttribute('aria-label') || '').toLowerCase();
                    return searchText.includes(term.toLowerCase());
                });
            }
        ];
        
        for (let i = 0; i < searchMethods.length; i++) {
            try {
                const element = searchMethods[i]();
                if (element) {
                    // console.log(`‚úÖ –ï–ª–µ–º–µ–Ω—Ç –∑–Ω–∞–π–¥–µ–Ω–æ –º–µ—Ç–æ–¥–æ–º ${i + 1}:`, element.tagName, element.className || element.id);
                    // console.log(`üìç –¢–µ–∫—Å—Ç –µ–ª–µ–º–µ–Ω—Ç–∞: "${element.textContent.trim()}"`);
                    return element;
                }
            } catch (error) {
                // console.log(`‚ùå –ú–µ—Ç–æ–¥ ${i + 1} –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–≤:`, error.message);
            }
        }
        
        return null;
    }

    /**
     * –ó–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –Ω–∞–π–∫—Ä–∞—â–æ–≥–æ –∑–±—ñ–≥—É —Å–µ—Ä–µ–¥ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
     */
    findBestMatchingElement(elements, term, exactTitle) {
        if (!elements.length) return null;
        
        const candidates = elements.filter(el => {
            const text = el.textContent.toLowerCase();
            return text.includes(term.toLowerCase());
        });
        
        if (!candidates.length) return null;
        
        // –Ø–∫—â–æ –º–∞—î–º–æ —Ç–æ—á–Ω–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫, –∑–Ω–∞—Ö–æ–¥–∏–º–æ –Ω–∞–π–∫—Ä–∞—â–∏–π –∑–±—ñ–≥
        if (exactTitle) {
            const exactMatch = candidates.find(el => 
                el.textContent.trim().toLowerCase() === exactTitle.toLowerCase()
            );
            if (exactMatch) return exactMatch;
            
            // –®—É–∫–∞—î–º–æ –Ω–∞–π–∫—Ä–∞—â–∏–π —á–∞—Å—Ç–∫–æ–≤–∏–π –∑–±—ñ–≥
            return candidates.reduce((best, current) => {
                const bestSimilarity = this.calculateTextSimilarity(best.textContent, exactTitle);
                const currentSimilarity = this.calculateTextSimilarity(current.textContent, exactTitle);
                return currentSimilarity > bestSimilarity ? current : best;
            });
        }
        
        // –Ø–∫—â–æ –Ω–µ–º–∞—î —Ç–æ—á–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫—É, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–µ—Ä—à–∏–π –∑–±—ñ–≥
        return candidates[0];
    }

    /**
     * –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø–æ–¥—ñ–±–Ω–æ—Å—Ç—ñ —Ç–µ–∫—Å—Ç—É (–ø—Ä–æ—Å—Ç–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º)
     */
    calculateTextSimilarity(text1, text2) {
        const t1 = text1.toLowerCase().trim();
        const t2 = text2.toLowerCase().trim();
        
        if (t1 === t2) return 1;
        
        const words1 = t1.split(/\s+/);
        const words2 = t2.split(/\s+/);
        
        const commonWords = words1.filter(word => words2.includes(word));
        const totalWords = Math.max(words1.length, words2.length);
        
        return commonWords.length / totalWords;
    }

    /**
     * –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è –¥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ (–ø–æ–∫—Ä–∞—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è)
     */
    applyHighlighting(targetElement, term, context) {
        let highlightApplied = false;

        // –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        const contextType = this.determineContextType(context, term);

        // –ü—ñ–¥—Å–≤—ñ—á—É—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç
        if (this.highlightTermInElement(targetElement, term, contextType)) {
            highlightApplied = true;
            // console.log(`‚úÖ –ü—ñ–¥—Å–≤—ñ—á–µ–Ω–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º—É –µ–ª–µ–º–µ–Ω—Ç—ñ`);
        }
        
        // –ü—ñ–¥—Å–≤—ñ—á—É—î–º–æ –¥–æ—á—ñ—Ä–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏
        const elementsToHighlight = targetElement.querySelectorAll('h1, h2, h3, h4, h5, h6, p, span, div, a, li, td, th');
        let childHighlights = 0;
        
        elementsToHighlight.forEach(el => {
            if (el.textContent.toLowerCase().includes(term.toLowerCase())) {
                if (this.highlightTermInElement(el, term, contextType)) {
                    highlightApplied = true;
                    childHighlights++;
                }
            }
        });
        
        if (childHighlights > 0) {
            // console.log(`‚úÖ –ü—ñ–¥—Å–≤—ñ—á–µ–Ω–æ –≤ ${childHighlights} –¥–æ—á—ñ—Ä–Ω—ñ—Ö –µ–ª–µ–º–µ–Ω—Ç–∞—Ö`);
        }
        
        return highlightApplied;
    }

    /**
     * –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∏–ø—É –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
     */
    determineContextType(context, term) {
        // –Ø–∫—â–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥–∞–Ω–æ —è–∫ —Ä—è–¥–æ–∫
        if (typeof context === 'string') {
            return context;
        }
        
        // –Ø–∫—â–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç - –æ–±'—î–∫—Ç
        if (context && typeof context === 'object') {
            if (context.field === 'phone' || context.fieldLabel === '–¢–µ–ª–µ—Ñ–æ–Ω') return 'phone';
            if (context.field === 'address' || context.fieldLabel === '–ê–¥—Ä–µ—Å–∞') return 'address';
            if (context.field === 'email' || context.fieldLabel === 'Email') return 'email';
        }
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ —Ç–µ—Ä–º—ñ–Ω—É
        if (/(\+?3?8?[\s-]?\(?0\d{2}\)?[\s-]?\d{3}[\s-]?\d{2}[\s-]?\d{2})|(\d{3}[\s-]?\d{2}[\s-]?\d{2})/.test(term)) {
            return 'phone';
        }
        
        if (/[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}/.test(term)) {
            return 'email';
        }
        
        if (term.toLowerCase().includes('–∫–∏—ó–≤') || term.toLowerCase().includes('—É–∫—Ä–∞—ó–Ω') ||
            term.toLowerCase().includes('–æ–±–ª–∞—Å—Ç—å') || term.toLowerCase().includes('–≤—É–ª.')) {
            return 'address';
        }
        
        return null;
    }

    /**
     * –ü—Ä–æ–∫—Ä—É—á—É–≤–∞–Ω–Ω—è –¥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ (–∑ –≤–∞—à–æ–≥–æ —Ñ–∞–π–ª—É)
     */
    scrollToElement(element) {
        const scrollOptions = {
            behavior: 'smooth',
            block: 'center',
            inline: 'nearest'
        };
        
        element.scrollIntoView(scrollOptions);
        
        // –î–æ–¥–∞—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é —Ñ–æ–∫—É—Å–∞
        element.classList.add('comspec-search-focus');
        
        setTimeout(() => {
            element.classList.remove('comspec-search-focus');
        }, 3000);
    }

    /**
     * –û—á–∏—â–µ–Ω–Ω—è –≤—Å—ñ—Ö –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω—å (–∑ –≤–∞—à–æ–≥–æ —Ñ–∞–π–ª—É + –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è)
     */
    clearHighlights() {
        const highlights = document.querySelectorAll(`.${this.highlightClass}`);
        // console.log(`üßπ –û—á–∏—â–µ–Ω–Ω—è ${highlights.length} –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω—å`);
        
        highlights.forEach(highlight => {
            const parent = highlight.parentNode;
            if (parent) {
                const textContent = highlight.textContent;
                const textNode = document.createTextNode(textContent);
                parent.replaceChild(textNode, highlight);
                parent.normalize();
            }
        });
        
        // –û—á–∏—â–∞—î–º–æ –º–∞—Å–∏–≤ –ø–æ—Ç–æ—á–Ω–∏—Ö –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω—å
        this.currentHighlights = [];
        
        // –í–∏–¥–∞–ª—è—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫
        this.hideHighlightCounter();
        
        return highlights.length;
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è (–≤—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–ª—è —á–∏—Å—Ç–æ–≥–æ UI)
     */
    showHighlightCounter(count, query) {
        // –õ—ñ—á–∏–ª—å–Ω–∏–∫ –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
        return;
    }

    /**
     * –ü—Ä–∏—Ö–æ–≤–∞—Ç–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è
     */
    hideHighlightCounter() {
        const counter = document.getElementById('comspec-highlight-counter');
        if (counter) {
            counter.remove();
        }
    }

    /**
     * –ù–∞–≤—ñ–≥–∞—Ü—ñ—è –ø–æ –ø—ñ–¥—Å–≤—ñ—á–µ–Ω–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
     */
    navigateHighlights(direction = 'next') {
        if (this.currentHighlights.length === 0) {
            console.warn('‚ö†Ô∏è –ù–µ–º–∞—î –ø—ñ–¥—Å–≤—ñ—á–µ–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó');
            return false;
        }
        
        // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –∞–∫—Ç–∏–≤–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç
        let currentIndex = this.currentHighlights.findIndex(el => 
            el.classList.contains('comspec-search-focus')
        );
        
        // –Ø–∫—â–æ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ, –ø–æ—á–∏–Ω–∞—î–º–æ –∑ –ø–µ—Ä—à–æ–≥–æ
        if (currentIndex === -1) {
            currentIndex = direction === 'next' ? -1 : this.currentHighlights.length;
        }
        
        // –û–±—á–∏—Å–ª—é—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —ñ–Ω–¥–µ–∫—Å
        let nextIndex;
        if (direction === 'next') {
            nextIndex = (currentIndex + 1) % this.currentHighlights.length;
        } else {
            nextIndex = currentIndex === 0 ? this.currentHighlights.length - 1 : currentIndex - 1;
        }
        
        // –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ñ–æ–∫—É—Å
        if (currentIndex >= 0 && this.currentHighlights[currentIndex]) {
            this.currentHighlights[currentIndex].classList.remove('comspec-search-focus');
        }
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞
        const targetElement = this.currentHighlights[nextIndex];
        if (targetElement) {
            this.scrollToElement(targetElement);
            
            // console.log(`üìç –ù–∞–≤—ñ–≥–∞—Ü—ñ—è: ${nextIndex + 1}/${this.currentHighlights.length}`);
            return true;
        }
        
        return false;
    }

    /**
     * –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–Ω—ñ —Å–∫–æ—Ä–æ—á–µ–Ω–Ω—è
     */
    setupKeyboardShortcuts() {
        document.addEventListener('keydown', (e) => {
            // F3 –∞–±–æ Ctrl+G –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –≤–ø–µ—Ä–µ–¥
            if (e.key === 'F3' || (e.ctrlKey && e.key === 'g')) {
                e.preventDefault();
                this.navigateHighlights('next');
            }
            
            // Shift+F3 –∞–±–æ Ctrl+Shift+G –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –Ω–∞–∑–∞–¥
            if ((e.shiftKey && e.key === 'F3') || (e.ctrlKey && e.shiftKey && e.key === 'G')) {
                e.preventDefault();
                this.navigateHighlights('prev');
            }
            
            // Escape –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è
            if (e.key === 'Escape') {
                this.clearHighlights();
            }
        });
    }

    /**
     * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥–ª–æ–±–∞–ª—å–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π
     */
    setupGlobalFunctions() {
        // –û—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó (–∑–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∞—à—ñ –Ω–∞–∑–≤–∏)
        window.highlightSearchResults = (query, results, options) => {
            return this.highlight(query, options);
        };
        
        window.clearSearchHighlights = (container) => {
            return this.clearHighlights(container);
        };
        
        window.navigateToResult = (resultData, highlightQuery) => {
            return this.scrollToElementWithHighlight(
                resultData.selector || 'body', 
                highlightQuery || resultData.text || '', 
                resultData.context,
                resultData.element
            );
        };
        
        // –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
        window.navigateNextHighlight = () => {
            return this.navigateHighlights('next');
        };
        
        window.navigatePrevHighlight = () => {
            return this.navigateHighlights('prev');
        };
        
        // –î–æ–¥–∞—î–º–æ –¥–æ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±'—î–∫—Ç–∞
        window.SearchHighlighting = this;
        window.searchHighlighting = this;
        
        // console.log('üé® –ì–ª–æ–±–∞–ª—å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ');
    }

    /**
     * –ü—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è –∑ –æ–ø—Ü—ñ—è–º–∏ (–¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ)
     */
    highlight(query, options = {}) {
        const {
            container = document.body
        } = options;
        
        return this.highlightTermInElement(container, query);
    }

    /**
     * –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è (–∑ –≤–∞—à–æ–≥–æ —Ñ–∞–π–ª—É + –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è)
     */
    test(queries = ['–ø—ñ—Å–æ–∫', '044', '–¥–æ—Å—Ç–∞–≤–∫–∞', 'COMSPEC']) {
        console.log('üß™ –¢–µ—Å—Ç –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è...');
        
        queries.forEach((query, index) => {
            setTimeout(() => {
                // console.log(`üîç –¢–µ—Å—Ç "${query}"`);
                this.scrollToElementWithHighlight('body', query);
                
                if (index === queries.length - 1) {
                    setTimeout(() => this.clearHighlights(), 3000);
                }
            }, index * 2000);
        });
    }

    /**
     * –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º–∏ –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è
     */
    diagnose() {
        const diagnostics = {
            isInitialized: this.isInitialized,
            stylesInjected: !!document.getElementById('comspec-search-highlighting-styles'),
            currentHighlights: this.currentHighlights.length,
            globalFunctionsAvailable: {
                highlightSearchResults: !!window.highlightSearchResults,
                clearSearchHighlights: !!window.clearSearchHighlights,
                navigateToResult: !!window.navigateToResult
            }
        };
        
        // console.log('üî¨ –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ SearchHighlighting:', diagnostics);
        return diagnostics;
    }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
let searchHighlightingInstance = null;

function initializeSearchHighlighting() {
    if (!searchHighlightingInstance) {
        searchHighlightingInstance = new SearchHighlighting();
        
        // –î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ contextSearch (—è–∫—â–æ —ñ—Å–Ω—É—î)
        if (window.contextSearch) {
            Object.assign(window.contextSearch, {
                highlightTermInElement: searchHighlightingInstance.highlightTermInElement.bind(searchHighlightingInstance),
                scrollToElementWithHighlight: searchHighlightingInstance.scrollToElementWithHighlight.bind(searchHighlightingInstance),
                clearHighlights: searchHighlightingInstance.clearHighlights.bind(searchHighlightingInstance),
                testHighlighting: searchHighlightingInstance.test.bind(searchHighlightingInstance),
                
                // –ü—Å–µ–≤–¥–æ–Ω—ñ–º–∏ (–∑–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∞—à—ñ)
                highlight: searchHighlightingInstance.highlightTermInElement.bind(searchHighlightingInstance),
                navigate: searchHighlightingInstance.scrollToElementWithHighlight.bind(searchHighlightingInstance),
                clear: searchHighlightingInstance.clearHighlights.bind(searchHighlightingInstance)
            });
        }
        
        // console.log('‚úÖ SearchHighlighting –≥–æ—Ç–æ–≤–∏–π –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è');
    }
    return searchHighlightingInstance;
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ DOM
if (typeof window !== 'undefined') {
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initializeSearchHighlighting);
    } else {
        initializeSearchHighlighting();
    }
}

// –ï–∫—Å–ø–æ—Ä—Ç –¥–ª—è –º–æ–¥—É–ª—å–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏ (–∑–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∞—à—ñ)
if (typeof module !== 'undefined' && module.exports) {
    module.exports = SearchHighlighting;
}

// ES6 –µ–∫—Å–ø–æ—Ä—Ç
export default SearchHighlighting;
export { initializeSearchHighlighting };

// console.log('‚úÖ SearchHighlighting –º–æ–¥—É–ª—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!');