import React, { useState, useRef, useEffect } from 'react';
import './LazyImage.scss';

const LazyImage = ({ 
  src, 
  alt = '', 
  placeholder = '/images/placeholder.jpg',
  width = 'auto',
  height = 'auto',
  className = '',
  priority = false, // –î–ª—è –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –∑–æ–±—Ä–∞–∂–µ–Ω—å (hero, –ª–æ–≥–æ—Ç–∏–ø–∏)
  objectFit = 'cover',
  ...props 
}) => {
  const [loaded, setLoaded] = useState(false);
  const [error, setError] = useState(false);
  const [inView, setInView] = useState(priority); // –Ø–∫—â–æ priority - –∑–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—Ç–∏ –æ–¥—Ä–∞–∑—É
  const imgRef = useRef();

  // Intersection Observer –¥–ª—è lazy loading
  useEffect(() => {
    if (priority) return; // –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –¥–ª—è –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–∏—Ö –∑–æ–±—Ä–∞–∂–µ–Ω—å

    const observer = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting) {
          setInView(true);
          observer.disconnect();
        }
      },
      { threshold: 0.1, rootMargin: '50px' }
    );

    if (imgRef.current) {
      observer.observe(imgRef.current);
    }

    return () => observer.disconnect();
  }, [priority]);

  const handleLoad = () => {
    setLoaded(true);
    setError(false);
  };

  const handleError = () => {
    setError(true);
    setLoaded(false);
  };

  return (
    <div 
      ref={imgRef}
      className={`lazy-image ${className}`}
      style={{ 
        width, 
        height,
        position: 'relative',
        overflow: 'hidden'
      }}
    >
      {/* Placeholder –ø–æ–∫–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è */}
      {!loaded && !error && (
        <div className="lazy-image__placeholder">
          {placeholder ? (
            <img 
              src={placeholder}
              alt=""
              style={{ 
                width: '100%', 
                height: '100%', 
                objectFit,
                filter: 'blur(5px)',
                opacity: 0.7
              }}
            />
          ) : (
            <div className="lazy-image__loading">
              <div className="spinner"></div>
              <span>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</span>
            </div>
          )}
        </div>
      )}

      {/* –û—Å–Ω–æ–≤–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è */}
      {inView && (
        <img 
          src={src}
          alt={alt}
          onLoad={handleLoad}
          onError={handleError}
          className={`lazy-image__img ${loaded ? 'loaded' : ''}`}
          style={{ 
            width: '100%',
            height: '100%',
            objectFit,
            transition: 'opacity 0.3s ease-in-out',
            opacity: loaded ? 1 : 0
          }}
          {...props}
        />
      )}

      {/* Fallback –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ */}
      {error && (
        <div className="lazy-image__error">
          <div className="error-icon">üì∑</div>
          <span>–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ</span>
        </div>
      )}
    </div>
  );
};

export default LazyImage;