// src/utils/limitChecker.js - –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª—ñ–º—ñ—Ç—ñ–≤ Google Apps Script
// üîß PRODUCTION OPTIMIZATION: –£–º–æ–≤–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É

import jsonpService from '../services/JSONPGoogleSheetsService';

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –¥–æ–∑–≤–æ–ª–µ–Ω–æ limit checking
const isLimitCheckingEnabled = () => {
  const isDevelopment = process.env.NODE_ENV === 'development';
  const isManuallyEnabled = typeof window !== 'undefined' && window.COMSPEC_LIMIT_CHECKING_ENABLED === true;
  const isDebugMode = typeof window !== 'undefined' && window.location.search.includes('debug=true');
  const isAdminMode = typeof window !== 'undefined' && window.location.search.includes('admin=true');
  
  return isDevelopment || isManuallyEnabled || isDebugMode || isAdminMode;
};

// –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è production
const mockFunction = () => {
  console.warn('‚ö†Ô∏è –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª—ñ–º—ñ—Ç—ñ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ production. –£–≤—ñ–º–∫–Ω—ñ—Ç—å debug —Ä–µ–∂–∏–º.');
  return Promise.resolve({ available: true, message: 'Limit checking disabled in production' });
};

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É –ª—ñ–º—ñ—Ç—ñ–≤ Google Apps Script
 */
export const checkLimits = isLimitCheckingEnabled() ?
  async () => {
    console.log('üìä –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª—ñ–º—ñ—Ç—ñ–≤ Google Apps Script...');
    
    try {
      const result = await jsonpService.testConnection();
      
      if (result.success) {
        console.log('‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Apps Script –ø—Ä–∞—Ü—é—î');
        console.log('üìä –°—Ç–∞—Ç—É—Å –ª—ñ–º—ñ—Ç—ñ–≤:', result.limits || '–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
        return { 
          available: true, 
          message: '–õ—ñ–º—ñ—Ç–∏ –≤ –Ω–æ—Ä–º—ñ', 
          details: result.limits 
        };
      } else {
        console.warn('‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∏ –∑ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è–º:', result);
        return { 
          available: false, 
          message: result.error || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞' 
        };
      }
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ª—ñ–º—ñ—Ç—ñ–≤:', error);
      
      // –ê–Ω–∞–ª—ñ–∑ —Ç–∏–ø—ñ–≤ –ø–æ–º–∏–ª–æ–∫
      if (error.message.includes('OVER_QUERY_LIMIT')) {
        return {
          available: false,
          message: '–ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –¥–æ–±–æ–≤–∏–π –ª—ñ–º—ñ—Ç –∑–∞–ø–∏—Ç—ñ–≤ Google Apps Script',
          recommendation: '–û—á—ñ–∫—É–π—Ç–µ —Å–∫–∏–¥–∞–Ω–Ω—è –ª—ñ–º—ñ—Ç—ñ–≤ –æ 00:00 PST/PDT'
        };
      } else if (error.message.includes('Service invoked too many times')) {
        return {
          available: false,
          message: '–ó–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ –≤–∏–∫–ª–∏–∫—ñ–≤ —Å–µ—Ä–≤—ñ—Å—É',
          recommendation: '–ó—Ä–æ–±—ñ—Ç—å –ø–∞—É–∑—É –Ω–∞ –∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω'
        };
      } else if (error.message.includes('–¢–∞–π–º–∞—É—Ç')) {
        return {
          available: false,
          message: '–¢–∞–π–º–∞—É—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Apps Script',
          recommendation: '–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è'
        };
      } else {
        return {
          available: false,
          message: error.message || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞',
          recommendation: '–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é —Å–µ—Ä–≤—ñ—Å—É'
        };
      }
    }
  } : mockFunction;

/**
 * –®–≤–∏–¥–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
 */
export const isTestingAvailable = isLimitCheckingEnabled() ?
  async () => {
    const result = await checkLimits();
    return result.available;
  } : () => Promise.resolve(true);

/**
 * –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ –∑ —Ä–µ—Ç—Ä–∞—è–º–∏
 */
export const waitForAvailability = isLimitCheckingEnabled() ?
  async (maxRetries = 5, retryDelay = 5000) => {
    console.log(`‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ —Å–µ—Ä–≤—ñ—Å—É (${maxRetries} —Å–ø—Ä–æ–±)...`);
    
    for (let i = 1; i <= maxRetries; i++) {
      console.log(`üîÑ –°–ø—Ä–æ–±–∞ ${i}/${maxRetries}...`);
      
      const result = await checkLimits();
      
      if (result.available) {
        console.log('‚úÖ –°–µ—Ä–≤—ñ—Å –¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è!');
        return true;
      }
      
      if (i < maxRetries) {
        console.log(`‚è≥ –ü–∞—É–∑–∞ ${retryDelay/1000}—Å –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é —Å–ø—Ä–æ–±–æ—é...`);
        await new Promise(resolve => setTimeout(resolve, retryDelay));
      }
    }
    
    console.log('‚ùå –°–µ—Ä–≤—ñ—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –ø—ñ—Å–ª—è –≤—Å—ñ—Ö —Å–ø—Ä–æ–±');
    return false;
  } : () => Promise.resolve(true);

/**
 * –ü–æ–∫–∞–∑ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —á–∞—Å—É —Ç–∞ —á–∞—Å—É —Å–∫–∏–¥–∞–Ω–Ω—è –ª—ñ–º—ñ—Ç—ñ–≤
 */
export const showLimitResetTime = isLimitCheckingEnabled() ?
  () => {
    const now = new Date();
    const pstTime = new Date(now.toLocaleString("en-US", {timeZone: "America/Los_Angeles"}));
    const nextReset = new Date(pstTime);
    nextReset.setHours(24, 0, 0, 0); // –ù–∞—Å—Ç—É–ø–Ω–∏–π –¥–µ–Ω—å –æ 00:00 PST
    
    console.log('üïí –ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å:');
    console.log(`   –ú—ñ—Å—Ü–µ–≤–∏–π: ${now.toLocaleString()}`);
    console.log(`   PST/PDT: ${pstTime.toLocaleString()}`);
    console.log(`üîÑ –ù–∞—Å—Ç—É–ø–Ω–µ —Å–∫–∏–¥–∞–Ω–Ω—è –ª—ñ–º—ñ—Ç—ñ–≤: ${nextReset.toLocaleString()}`);
    
    const hoursUntilReset = Math.ceil((nextReset - pstTime) / (1000 * 60 * 60));
    console.log(`‚è∞ –î–æ —Å–∫–∏–¥–∞–Ω–Ω—è: ~${hoursUntilReset} –≥–æ–¥–∏–Ω`);
    
    return {
      currentTime: now,
      pstTime: pstTime,
      nextReset: nextReset,
      hoursUntilReset: hoursUntilReset
    };
  } : () => ({ message: 'Limit checking disabled' });

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è
if (!isLimitCheckingEnabled()) {
  console.log('üö´ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª—ñ–º—ñ—Ç—ñ–≤ –≤–∏–º–∫–Ω–µ–Ω–∞ –≤ production —Ä–µ–∂–∏–º—ñ');
  console.log('üí° –©–æ–± —É–≤—ñ–º–∫–Ω—É—Ç–∏: window.COMSPEC_LIMIT_CHECKING_ENABLED = true –∞–±–æ ?debug=true');
  
  // –î–æ–¥–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é —É–≤—ñ–º–∫–Ω–µ–Ω–Ω—è –¥–æ window
  if (typeof window !== 'undefined') {
    window.enableLimitChecking = () => {
      window.COMSPEC_LIMIT_CHECKING_ENABLED = true;
      console.log('‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª—ñ–º—ñ—Ç—ñ–≤ —É–≤—ñ–º–∫–Ω–µ–Ω–∞! –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Å—Ç–æ—Ä—ñ–Ω–∫—É.');
    };
    console.log('üìã –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–≤—ñ–º–∫–Ω–µ–Ω–Ω—è: window.enableLimitChecking()');
  }
} else {
  console.log('üìä –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª—ñ–º—ñ—Ç—ñ–≤ –∞–∫—Ç–∏–≤–Ω–∞ (development/debug —Ä–µ–∂–∏–º)');
  
  // –î–æ–¥–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–æ window
  if (typeof window !== 'undefined') {
    window.limitChecker = {
      checkLimits,
      isTestingAvailable,
      waitForAvailability,
      showLimitResetTime,
      
      // –®–≤–∏–¥–∫—ñ –∫–æ–º–∞–Ω–¥–∏
      check: checkLimits,
      wait: waitForAvailability,
      time: showLimitResetTime
    };
    
    console.log('üìä –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª—ñ–º—ñ—Ç—ñ–≤ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ window.limitChecker');
    console.log('üìã –ö–æ–º–∞–Ω–¥–∏:');
    console.log('  limitChecker.check() - –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ª—ñ–º—ñ—Ç–∏');
    console.log('  limitChecker.wait() - –æ—á—ñ–∫—É–≤–∞—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ');
    console.log('  limitChecker.time() - –ø–æ–∫–∞–∑–∞—Ç–∏ —á–∞—Å —Å–∫–∏–¥–∞–Ω–Ω—è');
  }
}

export default {
  checkLimits,
  isTestingAvailable,
  waitForAvailability,
  showLimitResetTime
};