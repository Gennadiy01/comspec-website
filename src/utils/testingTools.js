// src/utils/testingTools.js - –Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å
// üîß PRODUCTION OPTIMIZATION: –£–º–æ–≤–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É

import jsonpService from '../services/JSONPGoogleSheetsService';
import telegramService from '../services/TelegramService';

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –¥–æ–∑–≤–æ–ª–µ–Ω–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
const isTestingEnabled = () => {
  const isDevelopment = process.env.NODE_ENV === 'development';
  const isManuallyEnabled = typeof window !== 'undefined' && window.COMSPEC_TESTING_ENABLED === true;
  const isDebugMode = typeof window !== 'undefined' && window.location.search.includes('debug=true');
  
  return isDevelopment || isManuallyEnabled || isDebugMode;
};

// –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è production
const mockFunction = () => {
  console.warn('‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ production. –£–≤—ñ–º–∫–Ω—ñ—Ç—å debug —Ä–µ–∂–∏–º.');
  return Promise.resolve({ success: false, error: 'Testing disabled in production' });
};

/**
 * –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
 */
export const generateTestData = isTestingEnabled() ? 
  (type = 'delivery', testId = Date.now()) => {
    const baseData = {
      name: `–¢–µ—Å—Ç ${testId}`,
      phone: `+38050${String(testId).slice(-7)}`,
      email: `test${testId}@example.com`,
      message: `–¢–µ—Å—Ç–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ${testId} - ${type}`,
    };

    if (type === 'delivery') {
      return {
        ...baseData,
        name: `–¢–µ—Å—Ç –î–æ—Å—Ç–∞–≤–∫–∞ ${testId}`,
        product: '–©–µ–±—ñ–Ω—å',
        deliveryType: 'delivery',
        address: '–ö–∏—ó–≤, –≤—É–ª. –¢–µ—Å—Ç–æ–≤–∞, 123',
      };
    }

    if (type === 'pickup') {
      return {
        ...baseData,
        name: `–¢–µ—Å—Ç –°–∞–º–æ–≤–∏–≤—ñ–∑ ${testId}`,
        product: '–ü—ñ—Å–æ–∫',
        deliveryType: 'pickup',
        address: '', // –ú–∞—î –±—É—Ç–∏ –ø—É—Å—Ç–∏–º
        loadingPoint: "–¢–î–í ¬´–Ü–≥–Ω–∞—Ç–ø—ñ–ª—å—Å—å–∫–∏–π –∫–∞—Ä'—î—Ä¬ª",
      };
    }

    if (type === 'consultation') {
      return {
        ...baseData,
        name: `–¢–µ—Å—Ç –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è ${testId}`,
        message: `–¢–µ—Å—Ç–æ–≤–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è ${testId}`,
      };
    }

    return baseData;
  } : mockFunction;

/**
 * –®–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ –¥–æ—Å—Ç–∞–≤–∫–æ—é
 */
export const testDeliveryOrder = isTestingEnabled() ?
  async (browserName = 'Unknown') => {
    const testId = Date.now();
    console.log(`üöö –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ –¥–æ—Å—Ç–∞–≤–∫–æ—é –≤ ${browserName}`);
    
    try {
      const testData = generateTestData('delivery', testId);
      const result = await jsonpService.saveOrder(
        testData, 
        false, 
        `Test-Delivery-${browserName}`
      );
      
      console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏:', result);
      return { success: true, result, testData };
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏:', error);
      return { success: false, error, testData: null };
    }
  } : mockFunction;

/**
 * –®–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∞–º–æ–≤–∏–≤–æ–∑—É
 */
export const testPickupOrder = isTestingEnabled() ?
  async (browserName = 'Unknown') => {
    const testId = Date.now();
    console.log(`üì¶ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∞–º–æ–≤–∏–≤–æ–∑—É –≤ ${browserName}`);
    
    try {
      const testData = generateTestData('pickup', testId);
      
      // –ö–†–ò–¢–ò–ß–ù–ê –ü–ï–†–ï–í–Ü–†–ö–ê: –∞–¥—Ä–µ—Å–∞ –º–∞—î –±—É—Ç–∏ –ø—É—Å—Ç–æ—é
      if (testData.address && testData.address !== '') {
        console.error('‚ùå –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê: –∞–¥—Ä–µ—Å–∞ –Ω–µ –ø—É—Å—Ç–∞ –¥–ª—è —Å–∞–º–æ–≤–∏–≤–æ–∑—É!');
        return { success: false, error: 'Address not empty for pickup', testData };
      }
      
      const result = await jsonpService.saveOrder(
        testData, 
        false, 
        `Test-Pickup-${browserName}`
      );
      
      console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç—É —Å–∞–º–æ–≤–∏–≤–æ–∑—É:', result);
      return { success: true, result, testData };
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É —Å–∞–º–æ–≤–∏–≤–æ–∑—É:', error);
      return { success: false, error, testData: null };
    }
  } : mockFunction;

/**
 * –®–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó
 */
export const testConsultation = isTestingEnabled() ?
  async (browserName = 'Unknown') => {
    const testId = Date.now();
    console.log(`üí¨ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó –≤ ${browserName}`);
    
    try {
      const testData = generateTestData('consultation', testId);
      const result = await jsonpService.saveOrder(
        testData, 
        true, // consultation mode
        `Test-Consultation-${browserName}`
      );
      
      console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó:', result);
      return { success: true, result, testData };
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó:', error);
      return { success: false, error, testData: null };
    }
  } : mockFunction;

/**
 * –¢–µ—Å—Ç Telegram —Å–µ—Ä–≤—ñ—Å—É
 */
export const testTelegramService = isTestingEnabled() ?
  async () => {
    console.log('ü§ñ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Telegram —Å–µ—Ä–≤—ñ—Å—É');
    
    if (!telegramService.isEnabled()) {
      console.warn('‚ö†Ô∏è Telegram —Å–µ—Ä–≤—ñ—Å –≤–∏–º–∫–Ω–µ–Ω–∏–π');
      return { success: false, error: 'Telegram service disabled' };
    }
    
    try {
      const testData = generateTestData('delivery', 'TG-TEST');
      const telegramData = {
        orderId: 'TEST-TG-' + Date.now(),
        manager: 'Test Manager',
        orderData: testData,
        isConsultation: false,
        managerTelegramChatId: telegramService.chatId
      };
      
      const result = await telegramService.sendOrderNotification(telegramData);
      console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç Telegram —Ç–µ—Å—Ç—É:', result);
      return { success: true, result };
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ Telegram —Ç–µ—Å—Ç—É:', error);
      return { success: false, error };
    }
  } : mockFunction;

/**
 * –ö–æ–º–ø–ª–µ–∫—Å–Ω–∏–π —Ç–µ—Å—Ç –≤—Å—ñ—Ö —Ç–∏–ø—ñ–≤ –∑–∞–º–æ–≤–ª–µ–Ω—å
 */
export const runFullTest = isTestingEnabled() ?
  async (browserName = 'Unknown') => {
    console.log(`üß™ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç—É –≤ ${browserName}`);
    
    const results = {
      browser: browserName,
      timestamp: new Date().toISOString(),
      tests: {}
    };
    
    // –¢–µ—Å—Ç –¥–æ—Å—Ç–∞–≤–∫–∏
    console.log('\n--- –¢–µ—Å—Ç 1: –î–æ—Å—Ç–∞–≤–∫–∞ ---');
    results.tests.delivery = await testDeliveryOrder(browserName);
    await new Promise(resolve => setTimeout(resolve, 2000)); // –ü–∞—É–∑–∞ –º—ñ–∂ —Ç–µ—Å—Ç–∞–º–∏
    
    // –¢–µ—Å—Ç —Å–∞–º–æ–≤–∏–≤–æ–∑—É
    console.log('\n--- –¢–µ—Å—Ç 2: –°–∞–º–æ–≤–∏–≤—ñ–∑ ---');
    results.tests.pickup = await testPickupOrder(browserName);
    await new Promise(resolve => setTimeout(resolve, 2000)); // –ü–∞—É–∑–∞ –º—ñ–∂ —Ç–µ—Å—Ç–∞–º–∏
    
    // –¢–µ—Å—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó
    console.log('\n--- –¢–µ—Å—Ç 3: –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è ---');
    results.tests.consultation = await testConsultation(browserName);
    await new Promise(resolve => setTimeout(resolve, 2000)); // –ü–∞—É–∑–∞ –º—ñ–∂ —Ç–µ—Å—Ç–∞–º–∏
    
    // –¢–µ—Å—Ç Telegram (–æ–¥–∏–Ω —Ä–∞–∑)
    if (browserName === 'Chrome' || browserName === 'Unknown') {
      console.log('\n--- –¢–µ—Å—Ç 4: Telegram ---');
      results.tests.telegram = await testTelegramService();
    }
    
    console.log('\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç—É:', results);
    
    // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –≤ localStorage –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
    try {
      const existingResults = JSON.parse(localStorage.getItem('comspec_test_results') || '[]');
      existingResults.push(results);
      localStorage.setItem('comspec_test_results', JSON.stringify(existingResults));
      console.log('üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ localStorage');
    } catch (error) {
      console.warn('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏:', error);
    }
    
    return results;
  } : mockFunction;

/**
 * –î–µ—Ç–µ–∫—Ü—ñ—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞
 */
export const detectBrowser = () => {
  if (typeof navigator === 'undefined') return 'Unknown';
  
  const userAgent = navigator.userAgent.toLowerCase();
  
  if (userAgent.includes('chrome') && !userAgent.includes('edge')) {
    return 'Chrome';
  } else if (userAgent.includes('firefox')) {
    return 'Firefox';
  } else if (userAgent.includes('edge') || userAgent.includes('edg/')) {
    return 'Edge';
  } else if (userAgent.includes('safari') && !userAgent.includes('chrome')) {
    return 'Safari';
  } else {
    return 'Unknown';
  }
};

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è
if (!isTestingEnabled()) {
  console.log('üö´ –¢–µ—Å—Ç–æ–≤—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ –≤–∏–º–∫–Ω–µ–Ω—ñ –≤ production —Ä–µ–∂–∏–º—ñ');
  console.log('üí° –©–æ–± —É–≤—ñ–º–∫–Ω—É—Ç–∏: window.COMSPEC_TESTING_ENABLED = true –∞–±–æ ?debug=true');
  
  // –î–æ–¥–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é —É–≤—ñ–º–∫–Ω–µ–Ω–Ω—è –¥–æ window
  if (typeof window !== 'undefined') {
    window.enableTesting = () => {
      window.COMSPEC_TESTING_ENABLED = true;
      console.log('‚úÖ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —É–≤—ñ–º–∫–Ω–µ–Ω–æ! –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Å—Ç–æ—Ä—ñ–Ω–∫—É.');
    };
    console.log('üìã –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–≤—ñ–º–∫–Ω–µ–Ω–Ω—è: window.enableTesting()');
  }
} else {
  console.log('üß™ –¢–µ—Å—Ç–æ–≤—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ (development/debug —Ä–µ–∂–∏–º)');
  
  // –î–æ–¥–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–æ window –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
  if (typeof window !== 'undefined') {
    window.testingTools = {
      generateTestData,
      testDeliveryOrder,
      testPickupOrder,
      testConsultation,
      testTelegramService,
      runFullTest,
      detectBrowser,
      
      // –®–≤–∏–¥–∫—ñ –∫–æ–º–∞–Ω–¥–∏
      quickDeliveryTest: () => testDeliveryOrder(detectBrowser()),
      quickPickupTest: () => testPickupOrder(detectBrowser()),
      quickConsultationTest: () => testConsultation(detectBrowser()),
      fullTest: () => runFullTest(detectBrowser()),
      
      // –û—á–∏—â–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
      clearTestResults: () => {
        localStorage.removeItem('comspec_test_results');
        console.log('üóëÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—ñ–≤ –æ—á–∏—â–µ–Ω–æ');
      },
      
      // –ü–µ—Ä–µ–≥–ª—è–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
      showTestResults: () => {
        const results = JSON.parse(localStorage.getItem('comspec_test_results') || '[]');
        console.table(results.map(r => ({
          browser: r.browser,
          timestamp: r.timestamp,
          delivery: r.tests.delivery?.success ? '‚úÖ' : '‚ùå',
          pickup: r.tests.pickup?.success ? '‚úÖ' : '‚ùå',
          consultation: r.tests.consultation?.success ? '‚úÖ' : '‚ùå',
          telegram: r.tests.telegram?.success ? '‚úÖ' : r.tests.telegram ? '‚ùå' : '‚è∏Ô∏è'
        })));
        return results;
      }
    };
    
    console.log('üß™ –¢–µ—Å—Ç–æ–≤—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ –≤ window.testingTools');
    console.log('üìã –ö–æ–º–∞–Ω–¥–∏:');
    console.log('  testingTools.quickDeliveryTest() - —à–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç –¥–æ—Å—Ç–∞–≤–∫–∏');
    console.log('  testingTools.quickPickupTest() - —à–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç —Å–∞–º–æ–≤–∏–≤–æ–∑—É'); 
    console.log('  testingTools.quickConsultationTest() - —à–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó');
    console.log('  testingTools.fullTest() - –∫–æ–º–ø–ª–µ–∫—Å–Ω–∏–π —Ç–µ—Å—Ç');
    console.log('  testingTools.showTestResults() - –ø–æ–∫–∞–∑–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏');
    console.log('  testingTools.clearTestResults() - –æ—á–∏—Å—Ç–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏');
  }
}

export default {
  generateTestData,
  testDeliveryOrder,
  testPickupOrder,
  testConsultation,
  testTelegramService,
  runFullTest,
  detectBrowser
};