/**
 * üéØ –ü–†–Ø–ú–ò–ô –¢–ï–°–¢ –í–Ü–î–ü–†–ê–í–ö–ò –ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø –ì–ï–ù–ù–ê–î–Ü–Æ
 * –¢–µ—Å—Ç—É—î –ø—Ä—è–º–æ Telegram API –±–µ–∑ –ø—Ä–æ–º—ñ–∂–Ω–∏—Ö —à–∞—Ä—ñ–≤
 */

const https = require('https');

// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
const BOT_TOKEN = '8472229536:AAEquKfaV_nIa5opQAbb6Io2RSm3HRRFgO4';
const GENNADIY_CHAT_ID = '1559533342';
const API_URL = 'https://api.telegram.org/bot';

/**
 * –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
 */
function sendMessage(chatId, text) {
  return new Promise((resolve, reject) => {
    const url = `${API_URL}${BOT_TOKEN}/sendMessage`;
    
    const requestData = {
      chat_id: parseInt(chatId, 10),
      text: text
      // –ü—Ä–∏–±–∏—Ä–∞—î–º–æ parse_mode –¥–ª—è —Ç–µ—Å—Ç—É
    };
    
    const data = JSON.stringify(requestData);
    
    console.log('üì° –ó–∞–ø–∏—Ç –¥–æ Telegram API:');
    console.log(`URL: ${url}`);
    console.log(`Chat ID: ${chatId}`);
    console.log(`Message length: ${text.length} —Å–∏–º–≤–æ–ª—ñ–≤`);
    console.log('üìã JSON payload:');
    console.log(data);
    
    const options = {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json; charset=utf-8',
        'Content-Length': Buffer.byteLength(data, 'utf8')
      }
    };
    
    const req = https.request(url, options, (res) => {
      let responseBody = '';
      
      console.log(`üìä HTTP Status: ${res.statusCode}`);
      console.log(`üìä Headers:`, res.headers);
      
      res.on('data', (chunk) => {
        responseBody += chunk;
      });
      
      res.on('end', () => {
        console.log('üìã –ü–æ–≤–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å Telegram:');
        console.log(responseBody);
        
        try {
          const result = JSON.parse(responseBody);
          if (result.ok) {
            resolve(result.result);
          } else {
            reject(new Error(`Telegram API –ø–æ–º–∏–ª–∫–∞: ${result.description} (–∫–æ–¥: ${result.error_code})`));
          }
        } catch (error) {
          reject(new Error(`JSON parse –ø–æ–º–∏–ª–∫–∞: ${error.message}. –í—ñ–¥–ø–æ–≤—ñ–¥—å: ${responseBody}`));
        }
      });
    });
    
    req.on('error', (error) => {
      console.error('üö® HTTP –ø–æ–º–∏–ª–∫–∞:', error);
      reject(new Error(`HTTP –ø–æ–º–∏–ª–∫–∞: ${error.message}`));
    });
    
    req.write(data);
    req.end();
  });
}

/**
 * –¢–µ—Å—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–æ—Ç–∞
 */
async function testBotConnection() {
  console.log('ü§ñ –¢–ï–°–¢ 1: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑\'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–æ—Ç–æ–º');
  console.log('-'.repeat(50));
  
  try {
    const url = `${API_URL}${BOT_TOKEN}/getMe`;
    
    const response = await new Promise((resolve, reject) => {
      https.get(url, (res) => {
        let data = '';
        res.on('data', chunk => data += chunk);
        res.on('end', () => {
          try {
            resolve(JSON.parse(data));
          } catch (error) {
            reject(error);
          }
        });
      }).on('error', reject);
    });
    
    if (response.ok) {
      console.log('‚úÖ –ë–æ—Ç –ø—Ä–∞—Ü—é—î:');
      console.log(`  ID: ${response.result.id}`);
      console.log(`  Username: @${response.result.username}`);
      console.log(`  First Name: ${response.result.first_name}`);
      return response.result;
    } else {
      throw new Error(`–ë–æ—Ç –Ω–µ –ø—Ä–∞—Ü—é—î: ${response.description}`);
    }
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑\'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–æ—Ç–æ–º:', error.message);
    throw error;
  }
}

/**
 * –¢–µ—Å—Ç –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
 */
async function testSimpleMessage() {
  console.log('\nüí¨ –¢–ï–°–¢ 2: –ü—Ä–æ—Å—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ì–µ–Ω–Ω–∞–¥—ñ—é');
  console.log('-'.repeat(50));
  
  const simpleMessage = `üß™ –¢–ï–°–¢: –ü—Ä–∏–≤—ñ—Ç –ì–µ–Ω–Ω–∞–¥—ñ–π! –¶–µ —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é –≤—ñ–¥ COMSPEC –±–æ—Ç–∞.`;
  
  console.log('üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê –ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø:');
  console.log(`  –î–æ–≤–∂–∏–Ω–∞ —Ç–µ–∫—Å—Ç—É: ${simpleMessage.length}`);
  console.log(`  –¢–µ–∫—Å—Ç: "${simpleMessage}"`);
  console.log(`  –ö–æ–¥ —Å–∏–º–≤–æ–ª—ñ–≤: ${simpleMessage.split('').map(c => c.charCodeAt(0)).join(', ')}`.substring(0, 100) + '...');

  try {
    const result = await sendMessage(GENNADIY_CHAT_ID, simpleMessage);
    console.log('‚úÖ –ü—Ä–æ—Å—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!');
    console.log(`Message ID: ${result.message_id}`);
    console.log(`Date: ${new Date(result.date * 1000).toLocaleString('uk-UA')}`);
    return result;
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', error.message);
    throw error;
  }
}

/**
 * –¢–µ—Å—Ç –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–∫–ª–∞–¥–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (—è–∫ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è)
 */
async function testOrderMessage() {
  console.log('\nüì¶ –¢–ï–°–¢ 3: –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è');
  console.log('-'.repeat(50));
  
  const orderMessage = `üÜï –ù–û–í–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø #1753729864\n\nüë§ <b>–ö–ª—ñ—î–Ω—Ç:</b> –¢–ï–°–¢\nüìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <a href="tel:+380999888777">+380999888777</a>\nüìß <b>Email:</b> test@telegram.com\n\nüì¶ <b>–¢–æ–≤–∞—Ä:</b> –©–µ–±—ñ–Ω—å\nüöö <b>–¢–∏–ø:</b> –î–æ—Å—Ç–∞–≤–∫–∞\nüìç <b>–ê–¥—Ä–µ—Å–∞:</b> –º. –ö–∏—ó–≤\nüó∫Ô∏è <b>–†–µ–≥—ñ–æ–Ω:</b> –º. –ö–∏—ó–≤\nüí¨ <b>–ö–æ–º–µ–Ω—Ç–∞—Ä:</b> –¢–µ—Å—Ç Telegram —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó\n\n‚è∞ <b>–ß–∞—Å:</b> 28-07-2025 22:11:04\nüë®‚Äçüíº <b>–ú–µ–Ω–µ–¥–∂–µ—Ä:</b> –ì–µ–Ω–Ω–∞–¥—ñ–π –î–∏–∫–∏–π\nüåê <b>–î–∂–µ—Ä–µ–ª–æ:</b> final-test-development`;

  try {
    const result = await sendMessage(GENNADIY_CHAT_ID, orderMessage);
    console.log('‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!');
    console.log(`Message ID: ${result.message_id}`);
    return result;
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:', error.message);
    throw error;
  }
}

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π –±–æ—Ç
 */
async function checkIfBotBlocked() {
  console.log('\nüîç –¢–ï–°–¢ 4: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É —á–∞—Ç—É');
  console.log('-'.repeat(50));
  
  try {
    const url = `${API_URL}${BOT_TOKEN}/getChat`;
    const data = JSON.stringify({
      chat_id: GENNADIY_CHAT_ID
    });
    
    const response = await new Promise((resolve, reject) => {
      const options = {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json; charset=utf-8',
          'Content-Length': Buffer.byteLength(data, 'utf8')
        }
      };
      
      const req = https.request(url, options, (res) => {
        let responseBody = '';
        res.on('data', chunk => responseBody += chunk);
        res.on('end', () => {
          try {
            resolve(JSON.parse(responseBody));
          } catch (error) {
            reject(error);
          }
        });
      });
      
      req.on('error', reject);
      req.write(data);
      req.end();
    });
    
    if (response.ok) {
      console.log('‚úÖ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —á–∞—Ç:');
      console.log(`  ID: ${response.result.id}`);
      console.log(`  Type: ${response.result.type}`);
      if (response.result.first_name) {
        console.log(`  Name: ${response.result.first_name} ${response.result.last_name || ''}`);
      }
      if (response.result.username) {
        console.log(`  Username: @${response.result.username}`);
      }
      return response.result;
    } else {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —á–∞—Ç:');
      console.error(`  –ö–æ–¥: ${response.error_code}`);
      console.error(`  –û–ø–∏—Å: ${response.description}`);
      
      if (response.error_code === 403) {
        console.error('üö´ –ë–û–¢ –ó–ê–ë–õ–û–ö–û–í–ê–ù–ò–ô –ö–û–†–ò–°–¢–£–í–ê–ß–ï–ú –ê–ë–û –ù–ï –ú–û–ñ–ï –ù–ê–î–Ü–°–õ–ê–¢–ò –ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø');
      }
      
      throw new Error(`${response.description} (–∫–æ–¥: ${response.error_code})`);
    }
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —á–∞—Ç—É:', error.message);
    throw error;
  }
}

/**
 * –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
 */
async function runDiagnostics() {
  console.log('üéØ –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê TELEGRAM –í–Ü–î–ü–†–ê–í–ö–ò –î–õ–Ø –ì–ï–ù–ù–ê–î–Ü–Ø –î–ò–ö–û–ì–û');
  console.log('='.repeat(70));
  console.log(`üïí –ß–∞—Å: ${new Date().toLocaleString('uk-UA')}`);
  console.log(`ü§ñ Bot Token: ${BOT_TOKEN.substring(0, 10)}...`);
  console.log(`üë§ Chat ID: ${GENNADIY_CHAT_ID}`);
  console.log('='.repeat(70));
  
  const results = {};
  
  try {
    // –¢–µ—Å—Ç 1: –ó'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–æ—Ç–æ–º
    results.botConnection = await testBotConnection();
    
    // –¢–µ—Å—Ç 2: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∞—Ç—É
    results.chatInfo = await checkIfBotBlocked();
    
    // –¢–µ—Å—Ç 3: –ü—Ä–æ—Å—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    results.simpleMessage = await testSimpleMessage();
    
    // –¢–µ—Å—Ç 4: –°–∫–ª–∞–¥–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    results.orderMessage = await testOrderMessage();
    
    console.log('\n' + '='.repeat(70));
    console.log('üéâ –í–°–Ü –¢–ï–°–¢–ò –ü–†–û–ô–®–õ–ò –£–°–ü–Ü–®–ù–û!');
    console.log('‚úÖ Telegram —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –ø—Ä–∞—Ü—é—î –∫–æ—Ä–µ–∫—Ç–Ω–æ');
    console.log('‚úÖ –ì–µ–Ω–Ω–∞–¥—ñ–π –ø–æ–≤–∏–Ω–µ–Ω –æ—Ç—Ä–∏–º–∞—Ç–∏ 2 —Ç–µ—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è');
    console.log('='.repeat(70));
    
  } catch (error) {
    console.log('\n' + '='.repeat(70));
    console.error('üö® –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê –í–ò–Ø–í–ò–õ–ê –ü–†–û–ë–õ–ï–ú–£:');
    console.error(`‚ùå ${error.message}`);
    
    if (error.message.includes('403') || error.message.includes('Forbidden')) {
      console.error('\nüí° –ú–û–ñ–õ–ò–í–Ü –ü–†–ò–ß–ò–ù–ò:');
      console.error('1. –ì–µ–Ω–Ω–∞–¥—ñ–π –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –±–æ—Ç–∞');
      console.error('2. –ì–µ–Ω–Ω–∞–¥—ñ–π –Ω–µ –ø–∏—Å–∞–≤ –±–æ—Ç—É /start');
      console.error('3. Chat ID –∑–º—ñ–Ω–∏–≤—Å—è');
      console.error('\nüîß –†–Ü–®–ï–ù–ù–Ø:');
      console.error('1. –ü–æ–ø—Ä–æ—Å—ñ—Ç—å –ì–µ–Ω–Ω–∞–¥—ñ—è —Ä–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏ –±–æ—Ç–∞');
      console.error('2. –ü–æ–ø—Ä–æ—Å—ñ—Ç—å –Ω–∞–ø–∏—Å–∞—Ç–∏ /start –±–æ—Ç—É @COMSPEC_Orders_bot');
      console.error('3. –ü–µ—Ä–µ–∑–±–µ—Ä—ñ—Ç—å Chat ID —á–µ—Ä–µ–∑ telegram-collect-chat-ids.js');
    }
    
    console.log('='.repeat(70));
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
runDiagnostics().catch(error => {
  console.error('üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', error);
  process.exit(1);
});