// unified-test-suite/TestRunner.js
// –¶–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –∑–∞–ø—É—Å–∫–∞—á —Ç–µ—Å—Ç—ñ–≤ –ø–æ—à—É–∫–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏
// –í–µ—Ä—Å—ñ—è: 1.0.0

/**
 * üß™ –¶–ï–ù–¢–†–ê–õ–Ü–ó–û–í–ê–ù–ò–ô –ó–ê–ü–£–°–ö–ê–ß –¢–ï–°–¢–Ü–í –ü–û–®–£–ö–û–í–û–á –°–ò–°–¢–ï–ú–ò
 * 
 * –Ñ–¥–∏–Ω–∞ —Ç–æ—á–∫–∞ –≤—Ö–æ–¥—É –¥–ª—è –≤—Å—ñ—Ö —Ç–∏–ø—ñ–≤ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:
 * - –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ —Ç–µ—Å—Ç–∏
 * - –¢–µ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ  
 * - –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω—ñ —Ç–µ—Å—Ç–∏
 * - –†–µ–≥—Ä–µ—Å—ñ–π–Ω—ñ —Ç–µ—Å—Ç–∏
 */

class SearchTestRunner {
    constructor() {
        this.version = '1.0.0';
        this.startTime = null;
        this.results = {
            total: 0,
            passed: 0,
            failed: 0,
            skipped: 0,
            duration: 0,
            details: []
        };
        
        this.config = {
            timeout: 30000,
            retries: 1,
            parallel: false,
            reporting: true,
            screenshots: false
        };
        
        this.suites = new Map();
        this.hooks = {
            beforeAll: [],
            afterAll: [],
            beforeEach: [],
            afterEach: []
        };
        
        this.init();
    }
    
    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
     */
    init() {
        console.log(`üß™ SearchTestRunner v${this.version} —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ`);
        this.loadTestSuites();
        this.setupGlobalAPI();
    }
    
    /**
     * –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö —Ç–µ—Å—Ç–æ–≤–∏—Ö –Ω–∞–±–æ—Ä—ñ–≤
     */
    loadTestSuites() {
        // –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ —Ç–µ—Å—Ç–∏
        this.suites.set('functional', {
            name: '–§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ —Ç–µ—Å—Ç–∏',
            tests: [
                () => this.testSearchAccuracy(),
                () => this.testResultRelevance(),
                () => this.testSearchFiltering(),
                () => this.testHighlighting(),
                () => this.testNavigation()
            ],
            priority: 1
        });
        
        // –¢–µ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
        this.suites.set('performance', {
            name: '–¢–µ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ',
            tests: [
                () => this.testSearchSpeed(),
                () => this.testCaching(),
                () => this.testMemoryUsage(),
                () => this.testDebouncing(),
                () => this.testLargeDatasets()
            ],
            priority: 2
        });
        
        // –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω—ñ —Ç–µ—Å—Ç–∏
        this.suites.set('integration', {
            name: '–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω—ñ —Ç–µ—Å—Ç–∏',
            tests: [
                () => this.testEngineInitialization(),
                () => this.testComponentIntegration(),
                () => this.testDataConsistency(),
                () => this.testErrorHandling(),
                () => this.testBrowserCompatibility()
            ],
            priority: 3
        });
        
        // –†–µ–≥—Ä–µ—Å—ñ–π–Ω—ñ —Ç–µ—Å—Ç–∏
        this.suites.set('regression', {
            name: '–†–µ–≥—Ä–µ—Å—ñ–π–Ω—ñ —Ç–µ—Å—Ç–∏',
            tests: [
                () => this.testKnownIssues(),
                () => this.testCriticalPaths(),
                () => this.testEdgeCases(),
                () => this.testPreviousBugs()
            ],
            priority: 4
        });
        
        console.log(`üì¶ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${this.suites.size} —Ç–µ—Å—Ç–æ–≤–∏—Ö –Ω–∞–±–æ—Ä—ñ–≤`);
    }
    
    /**
     * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ API
     */
    setupGlobalAPI() {
        // –û—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
        window.runSearchTests = (suiteNames) => this.run(suiteNames);
        window.quickSearchTest = () => this.runQuick();
        window.searchTestStatus = () => this.getStatus();
        window.searchTestReport = () => this.generateReport();
        
        // –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
        window.configureSearchTests = (config) => this.configure(config);
        
        // –£—Ç–∏–ª—ñ—Ç–∏
        window.searchTestRunner = this;
        
        console.log('üåê –ì–ª–æ–±–∞–ª—å–Ω–µ API –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ');
    }
    
    /**
     * –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤
     * @param {string|string[]} suiteNames - –ù–∞–∑–≤–∏ —Ç–µ—Å—Ç–æ–≤–∏—Ö –Ω–∞–±–æ—Ä—ñ–≤ –∞–±–æ 'all'
     * @param {Object} options - –û–ø—Ü—ñ—ó –∑–∞–ø—É—Å–∫—É
     */
    async run(suiteNames = 'all', options = {}) {
        this.startTime = performance.now();
        this.results = { total: 0, passed: 0, failed: 0, skipped: 0, duration: 0, details: [] };
        
        console.log('üöÄ –ü–û–ß–ê–¢–û–ö –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ü–û–®–£–ö–û–í–û–á –°–ò–°–¢–ï–ú–ò');
        console.log('=' .repeat(60));
        
        try {
            // –í–∏–∫–æ–Ω–∞–Ω–Ω—è hooks beforeAll
            await this.executeHooks('beforeAll');
            
            // –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –Ω–∞–±–æ—Ä—ñ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫—É
            const suitesToRun = this.resolveSuites(suiteNames);
            
            // –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤
            if (options.parallel || this.config.parallel) {
                await this.runParallel(suitesToRun);
            } else {
                await this.runSequential(suitesToRun);
            }
            
            // –í–∏–∫–æ–Ω–∞–Ω–Ω—è hooks afterAll
            await this.executeHooks('afterAll');
            
        } catch (error) {
            console.error('üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:', error);
            this.results.failed++;
        }
        
        // –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è
        this.results.duration = performance.now() - this.startTime;
        this.printSummary();
        
        if (this.config.reporting) {
            this.generateReport();
        }
        
        return this.results;
    }
    
    /**
     * –®–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç –¥–ª—è —Ä–æ–∑—Ä–æ–±–∫–∏
     */
    async runQuick() {
        console.log('‚ö° –®–í–ò–î–ö–ò–ô –¢–ï–°–¢ –ü–û–®–£–ö–û–í–û–á –°–ò–°–¢–ï–ú–ò');
        
        const quickTests = [
            { name: '–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è', test: () => this.testEngineInitialization() },
            { name: '–ë–∞–∑–æ–≤–∏–π –ø–æ—à—É–∫', test: () => this.testBasicSearch() },
            { name: '–®–≤–∏–¥–∫—ñ—Å—Ç—å', test: () => this.testSearchSpeed() },
            { name: '–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ñ—Å—Ç—å', test: () => this.testResultRelevance() }
        ];
        
        let passed = 0;
        
        for (const test of quickTests) {
            try {
                console.log(`üîç ${test.name}...`);
                const result = await test.test();
                if (result.success) {
                    console.log(`‚úÖ ${test.name} - –ü–†–û–ô–î–ï–ù–û`);
                    passed++;
                } else {
                    console.log(`‚ùå ${test.name} - –ù–ï –ü–†–û–ô–î–ï–ù–û: ${result.message}`);
                }
            } catch (error) {
                console.log(`üí• ${test.name} - –ü–û–ú–ò–õ–ö–ê: ${error.message}`);
            }
        }
        
        console.log(`\nüìä –®–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç: ${passed}/${quickTests.length} –ø—Ä–æ–π–¥–µ–Ω–æ`);
        return { passed, total: quickTests.length, success: passed === quickTests.length };
    }
    
    /**
     * –ü–æ—Å–ª—ñ–¥–æ–≤–Ω–∏–π –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤
     */
    async runSequential(suites) {
        for (const suite of suites) {
            console.log(`\nüìã –ó–∞–ø—É—Å–∫ –Ω–∞–±–æ—Ä—É: ${suite.name}`);
            
            for (const test of suite.tests) {
                await this.executeHooks('beforeEach');
                const result = await this.executeTest(test);
                await this.executeHooks('afterEach');
                
                this.results.total++;
                this.results.details.push(result);
                
                if (result.success) {
                    this.results.passed++;
                    console.log(`‚úÖ ${result.name} (${result.duration}ms)`);
                } else {
                    this.results.failed++;
                    console.log(`‚ùå ${result.name} - ${result.error} (${result.duration}ms)`);
                }
            }
        }
    }
    
    /**
     * –ü–∞—Ä–∞–ª–µ–ª—å–Ω–∏–π –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤
     */
    async runParallel(suites) {
        const allTests = [];
        
        for (const suite of suites) {
            for (const test of suite.tests) {
                allTests.push({
                    suite: suite.name,
                    test: test
                });
            }
        }
        
        console.log(`üîÑ –ü–∞—Ä–∞–ª–µ–ª—å–Ω–∏–π –∑–∞–ø—É—Å–∫ ${allTests.length} —Ç–µ—Å—Ç—ñ–≤...`);
        
        const promises = allTests.map(async ({suite, test}) => {
            await this.executeHooks('beforeEach');
            const result = await this.executeTest(test);
            await this.executeHooks('afterEach');
            return result;
        });
        
        const results = await Promise.allSettled(promises);
        
        results.forEach(result => {
            this.results.total++;
            
            if (result.status === 'fulfilled' && result.value.success) {
                this.results.passed++;
                this.results.details.push(result.value);
            } else {
                this.results.failed++;
                this.results.details.push({
                    name: 'Unknown test',
                    success: false,
                    error: result.reason || result.value?.error || 'Unknown error',
                    duration: 0
                });
            }
        });
    }
    
    /**
     * –í–∏–∫–æ–Ω–∞–Ω–Ω—è –æ–∫—Ä–µ–º–æ–≥–æ —Ç–µ—Å—Ç—É
     */
    async executeTest(testFunction) {
        const testName = testFunction.name || 'Unnamed test';
        const startTime = performance.now();
        
        try {
            const result = await Promise.race([
                testFunction(),
                new Promise((_, reject) => 
                    setTimeout(() => reject(new Error('Test timeout')), this.config.timeout)
                )
            ]);
            
            const duration = Math.round(performance.now() - startTime);
            
            return {
                name: testName,
                success: result?.success !== false,
                duration: duration,
                details: result?.details || null,
                timestamp: new Date().toISOString()
            };
            
        } catch (error) {
            const duration = Math.round(performance.now() - startTime);
            
            return {
                name: testName,
                success: false,
                error: error.message,
                duration: duration,
                timestamp: new Date().toISOString()
            };
        }
    }
    
    /**
     * –í–∏–∫–æ–Ω–∞–Ω–Ω—è hooks
     */
    async executeHooks(hookName) {
        const hooks = this.hooks[hookName] || [];
        
        for (const hook of hooks) {
            try {
                await hook();
            } catch (error) {
                console.warn(`‚ö†Ô∏è Hook ${hookName} failed:`, error.message);
            }
        }
    }
    
    /**
     * –†–æ–∑–≤'—è–∑–∞–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –Ω–∞–±–æ—Ä—ñ–≤
     */
    resolveSuites(suiteNames) {
        if (suiteNames === 'all') {
            return Array.from(this.suites.values()).sort((a, b) => a.priority - b.priority);
        }
        
        const names = Array.isArray(suiteNames) ? suiteNames : [suiteNames];
        const resolved = [];
        
        for (const name of names) {
            if (this.suites.has(name)) {
                resolved.push(this.suites.get(name));
            } else {
                console.warn(`‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤–∏–π –Ω–∞–±—ñ—Ä "${name}" –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`);
            }
        }
        
        return resolved.sort((a, b) => a.priority - b.priority);
    }
    
    /**
     * –î—Ä—É–∫ –ø—ñ–¥—Å—É–º–∫—ñ–≤
     */
    printSummary() {
        console.log('\nüìä –ü–Ü–î–°–£–ú–ö–ò –¢–ï–°–¢–£–í–ê–ù–ù–Ø:');
        console.log('=' .repeat(60));
        console.log(`‚è±Ô∏è –ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: ${Math.round(this.results.duration)}ms`);
        console.log(`üìà –í—Å—å–æ–≥–æ —Ç–µ—Å—Ç—ñ–≤: ${this.results.total}`);
        console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${this.results.passed}`);
        console.log(`‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ: ${this.results.failed}`);
        console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${this.results.skipped}`);
        
        const successRate = this.results.total > 0 
            ? Math.round((this.results.passed / this.results.total) * 100)
            : 0;
            
        console.log(`üìä –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: ${successRate}%`);
        
        if (this.results.failed === 0) {
            console.log('\nüéâ –í–°–Ü –¢–ï–°–¢–ò –ü–†–û–ô–î–ï–ù–Ü –£–°–ü–Ü–®–ù–û!');
        } else {
            console.log('\n‚ö†Ô∏è –í–ò–Ø–í–õ–ï–ù–û –ü–†–û–ë–õ–ï–ú–ò - –ü–û–¢–†–Ü–ë–ù–ï –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø');
        }
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–≤—ñ—Ç—É
     */
    generateReport() {
        const report = {
            version: this.version,
            timestamp: new Date().toISOString(),
            summary: {
                total: this.results.total,
                passed: this.results.passed,
                failed: this.results.failed,
                skipped: this.results.skipped,
                duration: Math.round(this.results.duration),
                successRate: Math.round((this.results.passed / Math.max(this.results.total, 1)) * 100)
            },
            details: this.results.details,
            environment: {
                userAgent: navigator.userAgent,
                url: window.location.href,
                timestamp: new Date().toISOString()
            }
        };
        
        // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É localStorage
        try {
            localStorage.setItem('searchTestResults', JSON.stringify(report));
            console.log('üíæ –ó–≤—ñ—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ localStorage');
        } catch (error) {
            console.warn('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –∑–≤—ñ—Ç:', error.message);
        }
        
        return report;
    }
    
    /**
     * –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Ç–µ—Å—Ç—ñ–≤
     */
    configure(newConfig) {
        Object.assign(this.config, newConfig);
        console.log('‚öôÔ∏è –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –æ–Ω–æ–≤–ª–µ–Ω–æ:', this.config);
    }
    
    /**
     * –î–æ–¥–∞–≤–∞–Ω–Ω—è hooks
     */
    addHook(hookName, hookFunction) {
        if (this.hooks[hookName]) {
            this.hooks[hookName].push(hookFunction);
        }
    }
    
    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É
     */
    getStatus() {
        return {
            version: this.version,
            config: this.config,
            suites: Array.from(this.suites.keys()),
            lastResults: this.results
        };
    }
    
    // ==========================================
    // –ö–û–ù–ö–†–ï–¢–ù–Ü –¢–ï–°–¢–ò
    // ==========================================
    
    /**
     * –¢–µ—Å—Ç —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –¥–≤–∏–∂–∫–∞
     */
    async testEngineInitialization() {
        const checks = [
            () => typeof window.hybridSearchEngine !== 'undefined',
            () => typeof window.searchHighlighting !== 'undefined',
            () => typeof window.comspecSearchUtils !== 'undefined'
        ];
        
        const results = checks.map(check => check());
        const passed = results.filter(Boolean).length;
        
        return {
            success: passed === checks.length,
            details: { passed, total: checks.length },
            message: `${passed}/${checks.length} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ`
        };
    }
    
    /**
     * –ë–∞–∑–æ–≤–∏–π —Ç–µ—Å—Ç –ø–æ—à—É–∫—É
     */
    async testBasicSearch() {
        if (!window.hybridSearchEngine) {
            return { success: false, message: '–î–≤–∏–∂–æ–∫ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π' };
        }
        
        try {
            const results = window.hybridSearchEngine.search('—Ç–µ—Å—Ç', 5);
            return {
                success: Array.isArray(results),
                details: { count: results?.length || 0 },
                message: `–ó–Ω–∞–π–¥–µ–Ω–æ ${results?.length || 0} —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤`
            };
        } catch (error) {
            return { success: false, message: error.message };
        }
    }
    
    /**
     * –¢–µ—Å—Ç —à–≤–∏–¥–∫–æ—Å—Ç—ñ –ø–æ—à—É–∫—É
     */
    async testSearchSpeed() {
        if (!window.hybridSearchEngine) {
            return { success: false, message: '–î–≤–∏–∂–æ–∫ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π' };
        }
        
        const queries = ['–ø—ñ—Å–æ–∫', '—â–µ–±—ñ–Ω—å', '–±–µ—Ç–æ–Ω', '–¥–æ—Å—Ç–∞–≤–∫–∞'];
        const times = [];
        
        for (const query of queries) {
            const start = performance.now();
            window.hybridSearchEngine.search(query, 10);
            const end = performance.now();
            times.push(end - start);
        }
        
        const avgTime = times.reduce((a, b) => a + b, 0) / times.length;
        const success = avgTime < 50;
        
        return {
            success,
            details: { avgTime: Math.round(avgTime), times },
            message: `–°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å: ${Math.round(avgTime)}ms`
        };
    }
    
    /**
     * –¢–µ—Å—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
     */
    async testResultRelevance() {
        if (!window.hybridSearchEngine) {
            return { success: false, message: '–î–≤–∏–∂–æ–∫ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π' };
        }
        
        const testCases = [
            { query: '–ø—ñ—Å–æ–∫', expectedKeyword: '–ø—ñ—Å–æ–∫' },
            { query: '—â–µ–±—ñ–Ω—å', expectedKeyword: '—â–µ–±—ñ–Ω—å' },
            { query: '–¥–æ—Å—Ç–∞–≤–∫–∞', expectedKeyword: '–¥–æ—Å—Ç–∞–≤–∫–∞' }
        ];
        
        let relevantCount = 0;
        let totalResults = 0;
        
        for (const testCase of testCases) {
            const results = window.hybridSearchEngine.search(testCase.query, 5);
            totalResults += results.length;
            
            const relevant = results.filter(r => 
                r.title?.toLowerCase().includes(testCase.expectedKeyword) ||
                r.content?.toLowerCase().includes(testCase.expectedKeyword)
            );
            
            relevantCount += relevant.length;
        }
        
        const relevanceRate = totalResults > 0 ? (relevantCount / totalResults) * 100 : 0;
        const success = relevanceRate >= 80;
        
        return {
            success,
            details: { relevanceRate: Math.round(relevanceRate), relevantCount, totalResults },
            message: `–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ñ—Å—Ç—å: ${Math.round(relevanceRate)}%`
        };
    }
    
    /**
     * –¢–µ—Å—Ç –∫–µ—à—É–≤–∞–Ω–Ω—è
     */
    async testCaching() {
        if (!window.hybridSearchEngine) {
            return { success: false, message: '–î–≤–∏–∂–æ–∫ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π' };
        }
        
        const query = '—Ç–µ—Å—Ç_–∫–µ—à—É–≤–∞–Ω–Ω—è_' + Date.now();
        
        // –ü–µ—Ä—à–∏–π –ø–æ—à—É–∫
        const start1 = performance.now();
        window.hybridSearchEngine.search(query, 5);
        const time1 = performance.now() - start1;
        
        // –î—Ä—É–≥–∏–π –ø–æ—à—É–∫ (–º–∞—î –±—É—Ç–∏ –∑ –∫–µ—à—É)
        const start2 = performance.now();
        window.hybridSearchEngine.search(query, 5);
        const time2 = performance.now() - start2;
        
        const speedup = time1 / Math.max(time2, 0.1);
        const success = speedup > 1.5; // –ü—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è –º—ñ–Ω—ñ–º—É–º –≤ 1.5 —Ä–∞–∑–∏
        
        return {
            success,
            details: { time1: Math.round(time1), time2: Math.round(time2), speedup: Math.round(speedup * 10) / 10 },
            message: `–ü—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è: ${Math.round(speedup * 10) / 10}x`
        };
    }
    
    /**
     * –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è —ñ–Ω—à–∏—Ö —Ç–µ—Å—Ç—ñ–≤
     */
    async testSearchAccuracy() { return { success: true, message: 'Not implemented' }; }
    async testSearchFiltering() { return { success: true, message: 'Not implemented' }; }
    async testHighlighting() { return { success: true, message: 'Not implemented' }; }
    async testNavigation() { return { success: true, message: 'Not implemented' }; }
    async testMemoryUsage() { return { success: true, message: 'Not implemented' }; }
    async testDebouncing() { return { success: true, message: 'Not implemented' }; }
    async testLargeDatasets() { return { success: true, message: 'Not implemented' }; }
    async testComponentIntegration() { return { success: true, message: 'Not implemented' }; }
    async testDataConsistency() { return { success: true, message: 'Not implemented' }; }
    async testErrorHandling() { return { success: true, message: 'Not implemented' }; }
    async testBrowserCompatibility() { return { success: true, message: 'Not implemented' }; }
    async testKnownIssues() { return { success: true, message: 'Not implemented' }; }
    async testCriticalPaths() { return { success: true, message: 'Not implemented' }; }
    async testEdgeCases() { return { success: true, message: 'Not implemented' }; }
    async testPreviousBugs() { return { success: true, message: 'Not implemented' }; }
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
if (typeof window !== 'undefined') {
    window.searchTestRunner = new SearchTestRunner();
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≥–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å
    setTimeout(() => {
        console.log('üß™ SearchTestRunner –≥–æ—Ç–æ–≤–∏–π! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ:');
        console.log('  runSearchTests() - –≤—Å—ñ —Ç–µ—Å—Ç–∏');
        console.log('  runSearchTests("functional") - —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ —Ç–µ—Å—Ç–∏');
        console.log('  runSearchTests("performance") - —Ç–µ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ');
        console.log('  quickSearchTest() - —à–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç');
        console.log('  searchTestStatus() - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏');
    }, 1000);
}

export default SearchTestRunner;