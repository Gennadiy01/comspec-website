// STAGE2_VERIFICATION.js
// –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–º—ñ–Ω –µ—Ç–∞–ø—É 2

/**
 * üß™ –í–ï–†–ò–§–Ü–ö–ê–¶–Ü–Ø –ó–ú–Ü–ù –ï–¢–ê–ü–£ 2
 * –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —â–æ –∫–æ–Ω—Å–æ–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –Ω–µ –≤–ø–ª–∏–Ω—É–ª–∞ –Ω–∞ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å
 */

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±–∞–∑–æ–≤–∏—Ö —ñ–º–ø–æ—Ä—Ç—ñ–≤
function testImports() {
  console.log('üîç –¢–µ—Å—Ç 1: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ–º–ø–æ—Ä—Ç—ñ–≤');
  
  try {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –º–æ–∂–µ–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –º–æ–¥—É–ª—å
    const testImport = () => {
      // –¶–µ –±—É–¥–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –≤ –±—Ä–∞—É–∑–µ—Ä—ñ —á–µ—Ä–µ–∑ –¥–∏–Ω–∞–º—ñ—á–Ω–∏–π —ñ–º–ø–æ—Ä—Ç
      return import('../../data/UnifiedSearchIndex.js').then(module => {
        console.log('‚úÖ UnifiedSearchIndex.js —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
        console.log('üìä –î–æ—Å—Ç—É–ø–Ω—ñ –º–µ—Ç–æ–¥–∏:', Object.keys(module));
        return true;
      }).catch(error => {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è UnifiedSearchIndex.js:', error);
        return false;
      });
    };
    
    return testImport();
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–º–ø–æ—Ä—Ç—ñ–≤:', error);
    return false;
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ QuickSearch
function testQuickSearch() {
  console.log('üîç –¢–µ—Å—Ç 2: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ QuickSearch');
  
  try {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ QuickSearch –º–æ–∂–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ
    const testData = [
      { id: 1, title: '–¢–µ—Å—Ç', content: '–¢–µ—Å—Ç–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç', category: '–¢–µ—Å—Ç' }
    ];
    
    console.log('üìä –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ QuickSearch:', testData.length, '–∑–∞–ø–∏—Å—ñ–≤');
    
    // –°–∏–º—É–ª—é—î–º–æ –ø–æ—à—É–∫
    const searchResult = testData.filter(item => 
      item.title.toLowerCase().includes('—Ç–µ—Å—Ç')
    );
    
    console.log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—à—É–∫—É:', searchResult.length, '–∑–Ω–∞–π–¥–µ–Ω–æ');
    
    return searchResult.length > 0;
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è QuickSearch:', error);
    return false;
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ HybridSearchEngine
function testHybridSearchEngine() {
  console.log('üîç –¢–µ—Å—Ç 3: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ HybridSearchEngine');
  
  try {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ HybridSearchEngine –¥–æ—Å—Ç—É–ø–Ω–∏–π
    if (typeof window.hybridSearchEngine !== 'undefined') {
      console.log('‚úÖ HybridSearchEngine –∑–Ω–∞–π–¥–µ–Ω–æ –≤ window');
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const stats = window.hybridSearchEngine.getStats();
      console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–≤–∏–∂–∫–∞:', stats);
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ—à—É–∫
      const searchResults = window.hybridSearchEngine.search('—Ç–µ—Å—Ç', 5);
      console.log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É:', searchResults.length);
      
      return stats.totalRecords > 0;
    } else {
      console.warn('‚ö†Ô∏è HybridSearchEngine –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ window');
      return false;
    }
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è HybridSearchEngine:', error);
    return false;
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
function testCompatibility() {
  console.log('üîç –¢–µ—Å—Ç 4: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ');
  
  const compatibility = {
    hybridSearchEngine: typeof window.hybridSearchEngine !== 'undefined',
    contextSearch: typeof window.contextSearch !== 'undefined',
    searchHighlighting: typeof window.searchHighlighting !== 'undefined',
    comspecSearchUtils: typeof window.comspecSearchUtils !== 'undefined'
  };
  
  console.log('üîß –°—É–º—ñ—Å–Ω—ñ—Å—Ç—å –≥–ª–æ–±–∞–ª—å–Ω–∏—Ö –æ–±\'—î–∫—Ç—ñ–≤:', compatibility);
  
  const compatibilityCount = Object.values(compatibility).filter(Boolean).length;
  const totalCount = Object.keys(compatibility).length;
  
  console.log(`üìä –°—É–º—ñ—Å–Ω—ñ—Å—Ç—å: ${compatibilityCount}/${totalCount} –æ–±\'—î–∫—Ç—ñ–≤ –¥–æ—Å—Ç—É–ø–Ω—ñ`);
  
  return compatibilityCount >= totalCount * 0.75; // 75% —Å—É–º—ñ—Å–Ω—ñ—Å—Ç—å
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
function testPerformance() {
  console.log('üîç –¢–µ—Å—Ç 5: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ');
  
  try {
    if (typeof window.hybridSearchEngine !== 'undefined') {
      const startTime = performance.now();
      
      // –í–∏–∫–æ–Ω—É—î–º–æ –∫—ñ–ª—å–∫–∞ –ø–æ—à—É–∫—ñ–≤
      const queries = ['–ø—ñ—Å–æ–∫', '—â–µ–±—ñ–Ω—å', '–±–µ—Ç–æ–Ω', '–¥–æ—Å—Ç–∞–≤–∫–∞'];
      const results = queries.map(query => 
        window.hybridSearchEngine.search(query, 10)
      );
      
      const endTime = performance.now();
      const totalTime = endTime - startTime;
      const avgTime = totalTime / queries.length;
      
      console.log(`‚è±Ô∏è –ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: ${totalTime.toFixed(2)}ms –∑–∞–≥–∞–ª—å–Ω–∏–π`);
      console.log(`‚è±Ô∏è –°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å: ${avgTime.toFixed(2)}ms –Ω–∞ –∑–∞–ø–∏—Ç`);
      
      const totalResults = results.reduce((sum, r) => sum + r.length, 0);
      console.log(`üìä –ó–∞–≥–∞–ª—å–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤: ${totalResults}`);
      
      return avgTime < 100; // –ú–µ–Ω—à–µ 100ms –Ω–∞ –∑–∞–ø–∏—Ç
    } else {
      console.warn('‚ö†Ô∏è HybridSearchEngine –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ');
      return false;
    }
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ:', error);
    return false;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
async function runStage2Verification() {
  console.log('üöÄ –ü–û–ß–ê–¢–û–ö –í–ï–†–ò–§–Ü–ö–ê–¶–Ü–á –ï–¢–ê–ü–£ 2');
  console.log('='.repeat(50));
  
  const tests = [
    { name: '–Ü–º–ø–æ—Ä—Ç–∏', test: testImports },
    { name: 'QuickSearch', test: testQuickSearch },
    { name: 'HybridSearchEngine', test: testHybridSearchEngine },
    { name: '–°—É–º—ñ—Å–Ω—ñ—Å—Ç—å', test: testCompatibility },
    { name: '–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å', test: testPerformance }
  ];
  
  const results = [];
  
  for (const testCase of tests) {
    console.log(`\nüß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—É: ${testCase.name}`);
    
    try {
      const startTime = performance.now();
      const result = await testCase.test();
      const endTime = performance.now();
      
      const testResult = {
        name: testCase.name,
        passed: result === true,
        duration: Math.round(endTime - startTime),
        timestamp: new Date().toISOString()
      };
      
      results.push(testResult);
      
      if (result) {
        console.log(`‚úÖ ${testCase.name} - –ü–†–û–ô–î–ï–ù–û (${testResult.duration}ms)`);
      } else {
        console.log(`‚ùå ${testCase.name} - –ù–ï –ü–†–û–ô–î–ï–ù–û (${testResult.duration}ms)`);
      }
      
    } catch (error) {
      console.error(`üí• ${testCase.name} - –ü–û–ú–ò–õ–ö–ê:`, error);
      results.push({
        name: testCase.name,
        passed: false,
        duration: 0,
        error: error.message,
        timestamp: new Date().toISOString()
      });
    }
  }
  
  // –ü—ñ–¥—Å—É–º–∫–∏
  console.log('\nüìä –ü–Ü–î–°–£–ú–ö–ò –í–ï–†–ò–§–Ü–ö–ê–¶–Ü–á:');
  console.log('='.repeat(50));
  
  const passed = results.filter(r => r.passed).length;
  const failed = results.filter(r => !r.passed).length;
  const total = results.length;
  
  console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passed}/${total}`);
  console.log(`‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ: ${failed}/${total}`);
  console.log(`üìà –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: ${Math.round((passed/total)*100)}%`);
  
  if (failed === 0) {
    console.log('\nüéâ –ï–¢–ê–ü 2 –ü–†–û–ô–î–ï–ù–û –£–°–ü–Ü–®–ù–û!');
    console.log('‚ú® –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ñ, –º–æ–∂–Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–∏ –¥–æ –µ—Ç–∞–ø—É 3');
  } else {
    console.log('\n‚ö†Ô∏è –ï–¢–ê–ü 2 –ü–û–¢–†–ï–ë–£–Ñ –î–û–û–ü–†–ê–¶–Æ–í–ê–ù–ù–Ø');
    console.log('üîß –ù–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–º–∏–ª–∫–∏ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –¥–æ –µ—Ç–∞–ø—É 3');
  }
  
  // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
  if (typeof localStorage !== 'undefined') {
    try {
      localStorage.setItem('stage2_verification_results', JSON.stringify({
        results: results,
        summary: { passed, failed, total, successRate: Math.round((passed/total)*100) },
        timestamp: new Date().toISOString()
      }));
      console.log('\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ localStorage');
    } catch (error) {
      console.warn('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏:', error);
    }
  }
  
  return {
    passed,
    failed,
    total,
    successRate: Math.round((passed/total)*100),
    results: results
  };
}

// –ï–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
if (typeof window !== 'undefined') {
  window.runStage2Verification = runStage2Verification;
  window.testStage2Imports = testImports;
  window.testStage2QuickSearch = testQuickSearch;
  window.testStage2HybridSearchEngine = testHybridSearchEngine;
  window.testStage2Compatibility = testCompatibility;
  window.testStage2Performance = testPerformance;
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –∑–∞–ø—É—Å–∫ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ (–∑ –∑–∞—Ç—Ä–∏–º–∫–æ—é)
if (typeof window !== 'undefined') {
  setTimeout(() => {
    console.log('üß™ STAGE2_VERIFICATION –≥–æ—Ç–æ–≤–∏–π. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ:');
    console.log('  - window.runStage2Verification() - –ø–æ–≤–Ω–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è');
    console.log('  - window.testStage2Imports() - —Ç–µ—Å—Ç —ñ–º–ø–æ—Ä—Ç—ñ–≤');
    console.log('  - window.testStage2QuickSearch() - —Ç–µ—Å—Ç QuickSearch');
    console.log('  - window.testStage2HybridSearchEngine() - —Ç–µ—Å—Ç HybridSearchEngine');
    console.log('  - window.testStage2Compatibility() - —Ç–µ—Å—Ç —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ');
    console.log('  - window.testStage2Performance() - —Ç–µ—Å—Ç –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ');
  }, 1000);
}

export default runStage2Verification;