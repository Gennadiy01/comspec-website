/**
 * üß™ –¢–ï–°–¢ –§–û–†–ú–ê–¢–£–í–ê–ù–ù–Ø TELEGRAM –ü–û–í–Ü–î–û–ú–õ–ï–ù–¨
 * –¢–µ—Å—Ç—É—î —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø—Ä–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –±–µ–∑ React
 */

const https = require('https');

// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
const BOT_TOKEN = '8472229536:AAEquKfaV_nIa5opQAbb6Io2RSm3HRRFgO4';
const API_URL = 'https://api.telegram.org/bot';

/**
 * –§—É–Ω–∫—Ü—ñ—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (—Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ –∑ TelegramService)
 */
function formatOrderMessage(orderData) {
  const {
    orderId,
    manager,
    orderData: data,
    isConsultation
  } = orderData;
  
  // –ë–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
  const orderType = isConsultation ? 'üí¨ –ö–û–ù–°–£–õ–¨–¢–ê–¶–Ü–Ø' : 'üÜï –ù–û–í–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø';
  const orderNumber = orderId || '–ì–µ–Ω–µ—Ä—É—î—Ç—å—Å—è...';
  
  // –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
  let message = `${orderType} #${orderNumber}\n\n`;
  
  // –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
  message += `üë§ <b>–ö–ª—ñ—î–Ω—Ç:</b> ${data.name || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n`;
  message += `üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <a href="tel:${data.phone}">${data.phone || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}</a>\n`;
  
  if (data.email) {
    message += `üìß <b>Email:</b> ${data.email}\n`;
  }
  
  message += '\n';
  
  // –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
  if (!isConsultation) {
    if (data.product) {
      message += `üì¶ <b>–¢–æ–≤–∞—Ä:</b> ${data.product}\n`;
    }
    
    if (data.deliveryType) {
      const deliveryText = data.deliveryType === 'delivery' ? '–î–æ—Å—Ç–∞–≤–∫–∞' : '–°–∞–º–æ–≤–∏–≤—ñ–∑';
      message += `üöö <b>–¢–∏–ø:</b> ${deliveryText}\n`;
    }
    
    if (data.address) {
      message += `üìç <b>–ê–¥—Ä–µ—Å–∞:</b> ${data.address}\n`;
    }
    
    if (data.region) {
      message += `üó∫Ô∏è <b>–†–µ–≥—ñ–æ–Ω:</b> ${data.region}\n`;
    }
    
    if (data.loadingPoint || data.Loading_Point) {
      message += `üè≠ <b>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:</b> ${data.loadingPoint || data.Loading_Point}\n`;
    }
  }
  
  if (data.message) {
    message += `üí¨ <b>–ö–æ–º–µ–Ω—Ç–∞—Ä:</b> ${data.message}\n`;
  }
  
  message += '\n';
  
  // –°–∏—Å—Ç–µ–º–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
  message += `‚è∞ <b>–ß–∞—Å:</b> ${new Date().toLocaleString('uk-UA')}\n`;
  
  if (manager) {
    message += `üë®‚Äçüíº <b>–ú–µ–Ω–µ–¥–∂–µ—Ä:</b> ${manager}\n`;
  }
  
  message += `üåê <b>–î–∂–µ—Ä–µ–ª–æ:</b> ${data.source || 'Website'}-development`;
  
  return message;
}

/**
 * –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram
 */
function sendMessage(chatId, text) {
  return new Promise((resolve, reject) => {
    const url = `${API_URL}${BOT_TOKEN}/sendMessage`;
    
    const data = JSON.stringify({
      chat_id: chatId,
      text: text,
      parse_mode: 'HTML'
    });
    
    const options = {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Content-Length': data.length
      }
    };
    
    const req = https.request(url, options, (res) => {
      let responseBody = '';
      
      res.on('data', (chunk) => {
        responseBody += chunk;
      });
      
      res.on('end', () => {
        try {
          const result = JSON.parse(responseBody);
          if (result.ok) {
            resolve(result.result);
          } else {
            reject(new Error(`Telegram API –ø–æ–º–∏–ª–∫–∞: ${result.description}`));
          }
        } catch (error) {
          reject(new Error(`JSON parse –ø–æ–º–∏–ª–∫–∞: ${error.message}`));
        }
      });
    });
    
    req.on('error', (error) => {
      reject(new Error(`HTTP –ø–æ–º–∏–ª–∫–∞: ${error.message}`));
    });
    
    req.write(data);
    req.end();
  });
}

/**
 * –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
 */
async function runFormattingTests() {
  console.log('üß™ –¢–ï–°–¢ –§–û–†–ú–ê–¢–£–í–ê–ù–ù–Ø TELEGRAM –ü–û–í–Ü–î–û–ú–õ–ï–ù–¨');
  console.log('=' .repeat(60));
  console.log(`üïí –ß–∞—Å: ${new Date().toLocaleString('uk-UA')}`);
  console.log('=' .repeat(60));
  
  // –¢–µ—Å—Ç 1: –ó–≤–∏—á–∞–π–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
  console.log('\nüì¶ –¢–ï–°–¢ 1: –ó–≤–∏—á–∞–π–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è');
  console.log('-' .repeat(40));
  
  const orderData = {
    orderId: '#12345',
    manager: '–û–ª–µ–∫—Å–∞–Ω–¥—Ä –ü–µ—Ç—Ä–µ–Ω–∫–æ',
    isConsultation: false,
    orderData: {
      name: '–Ü–≤–∞–Ω –Ü–≤–∞–Ω–æ–≤–∏—á –¢–µ—Å—Ç–µ–Ω–∫–æ',
      phone: '+380671234567',
      email: 'test@comspec.ua',
      product: '–©–µ–±—ñ–Ω—å —Ñ—Ä–∞–∫—Ü—ñ—è 5-20–º–º',
      deliveryType: 'delivery',
      address: '–º. –ö–∏—ó–≤, –≤—É–ª. –•—Ä–µ—â–∞—Ç–∏–∫, 1',
      region: '–ö–∏—ó–≤',
      loadingPoint: "–¢–î–í ¬´–Ü–≥–Ω–∞—Ç–ø—ñ–ª—å—Å—å–∫–∏–π –∫–∞—Ä'—î—Ä¬ª",
      message: '–ü–æ—Ç—Ä—ñ–±–Ω–æ 5 —Ç–æ–Ω–Ω, –¥–æ—Å—Ç–∞–≤–∫–∞ –¥–æ 16:00',
      source: 'Website'
    }
  };
  
  const orderMessage = formatOrderMessage(orderData);
  console.log(orderMessage);
  
  // –¢–µ—Å—Ç 2: –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è
  console.log('\n\nüí¨ –¢–ï–°–¢ 2: –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è');
  console.log('-' .repeat(40));
  
  const consultationData = {
    orderId: '#C12345',
    manager: '–ú–∞—Ä—ñ—è –ö–æ–≤–∞–ª–µ–Ω–∫–æ',
    isConsultation: true,
    orderData: {
      name: '–ü–µ—Ç—Ä–æ –ü–µ—Ç—Ä–µ–Ω–∫–æ',
      phone: '+380509876543',
      email: 'petro@example.com',
      message: '–•–æ—á—É –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –ø—Ä–æ —Ü—ñ–Ω–∏ –Ω–∞ –±–µ—Ç–æ–Ω –¥–ª—è —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç—É –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –±—É–¥–∏–Ω–∫—É',
      source: 'Services-page'
    }
  };
  
  const consultationMessage = formatOrderMessage(consultationData);
  console.log(consultationMessage);
  
  // –¢–µ—Å—Ç 3: –ú—ñ–Ω—ñ–º–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ
  console.log('\n\nüìã –¢–ï–°–¢ 3: –ú—ñ–Ω—ñ–º–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ');
  console.log('-' .repeat(40));
  
  const minimalData = {
    orderId: '#MIN001',
    manager: null,
    isConsultation: false,
    orderData: {
      name: '–ê–Ω–æ–Ω—ñ–º',
      phone: '+380123456789',
      source: 'Website'
    }
  };
  
  const minimalMessage = formatOrderMessage(minimalData);
  console.log(minimalMessage);
  
  console.log('\n' + '=' .repeat(60));
  console.log('‚úÖ –í–°–Ü –¢–ï–°–¢–ò –§–û–†–ú–ê–¢–£–í–ê–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û!');
  
  // –ü—Ä–æ–ø–æ–Ω—É—î–º–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
  const chatId = process.argv[2];
  if (chatId) {
    console.log(`\nüì§ –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ç–µ—Å—Ç–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ —á–∞—Ç: ${chatId}`);
    try {
      const result = await sendMessage(chatId, orderMessage);
      console.log('‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!');
      console.log(`üì© Message ID: ${result.message_id}`);
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏:', error.message);
    }
  } else {
    console.log('\nüí° –î–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:');
    console.log('   node telegram-formatting-test.js YOUR_CHAT_ID');
  }
  
  console.log('=' .repeat(60));
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤
runFormattingTests().catch(error => {
  console.error('üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', error);
  process.exit(1);
});