/**
 * üß™ –¢–ï–°–¢ UTF-8 –ö–û–î–£–í–ê–ù–ù–Ø –î–õ–Ø TELEGRAM SERVICE
 * –¢–µ—Å—Ç—É—î —Ä–æ–±–æ—Ç—É –∑ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
 */

// –Ü–º–ø–æ—Ä—Ç—É—î–º–æ fetch –¥–ª—è Node.js
const fetch = require('node-fetch');
const { AbortController } = require('abort-controller');
global.fetch = fetch;
global.AbortController = AbortController;

// –Ü–º—ñ—Ç—É—î–º–æ config (–ú–û–ö–û–í–ê–ù–ò–ô)
const config = {
  TELEGRAM_BOT_TOKEN: 'MOCK_BOT_TOKEN_FOR_UNIT_TESTS',
  TELEGRAM_CHAT_ID: null,
  TELEGRAM_ENABLED: true,
  TELEGRAM_API_URL: 'https://api.telegram.org/bot',
  TELEGRAM_TIMEOUT: 10000,
  TELEGRAM_MANAGERS: {
    "–ì–µ–Ω–Ω–∞–¥—ñ–π –î–∏–∫–∏–π": "1559533342"
  },
  ENVIRONMENT: 'test'
};

// –Ü–º—ñ—Ç—É—î–º–æ –º–æ–¥—É–ª—å
global.window = { console };

// –ö–ª–∞—Å TelegramService (—Å–ø—Ä–æ—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è –¥–ª—è —Ç–µ—Å—Ç—É)
class TelegramService {
  constructor() {
    this.botToken = config.TELEGRAM_BOT_TOKEN;
    this.chatId = config.TELEGRAM_CHAT_ID;
    this.enabled = config.TELEGRAM_ENABLED;
    this.apiUrl = config.TELEGRAM_API_URL;
    this.timeout = config.TELEGRAM_TIMEOUT;
    this.managers = config.TELEGRAM_MANAGERS;
  }

  isEnabled() {
    return this.enabled && this.botToken;
  }

  async makeRequest(method, params = {}) {
    if (!this.isEnabled()) {
      throw new Error('Telegram service –≤–∏–º–∫–Ω–µ–Ω–∏–π –∞–±–æ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π');
    }

    const url = `${this.apiUrl}${this.botToken}/${method}`;
    
    console.log(`[TelegramService] üì° –ó–∞–ø–∏—Ç: ${method}`);
    console.log(`[TelegramService] üîó URL: ${url}`);
    console.log(`[TelegramService] üìã Params:`, JSON.stringify(params, null, 2));
    
    try {
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), this.timeout);
      
      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json; charset=utf-8',
        },
        body: JSON.stringify(params),
        signal: controller.signal
      });
      
      clearTimeout(timeoutId);
      
      const responseText = await response.text();
      console.log(`[TelegramService] üìä HTTP Status: ${response.status}`);
      console.log(`[TelegramService] üìã Response: ${responseText}`);
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      const data = JSON.parse(responseText);
      
      if (!data.ok) {
        throw new Error(`Telegram API –ø–æ–º–∏–ª–∫–∞: ${data.description}`);
      }
      
      console.log(`[TelegramService] ‚úÖ –£—Å–ø—ñ—à–Ω–∏–π –∑–∞–ø–∏—Ç: ${method}`);
      return data.result;
    } catch (error) {
      console.error(`[TelegramService] ‚ùå –ü–æ–º–∏–ª–∫–∞ ${method}:`, error);
      throw error;
    }
  }

  async sendMessage(text, chatId = null, parseMode = 'HTML') {
    const targetChatId = chatId || this.chatId;
    
    if (!targetChatId) {
      throw new Error('Chat ID –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π');
    }
    
    const params = {
      chat_id: parseInt(targetChatId, 10),
      text: text
    };
    
    if (parseMode) {
      params.parse_mode = parseMode;
    }
    
    try {
      const result = await this.makeRequest('sendMessage', params);
      
      return {
        success: true,
        messageId: result.message_id,
        message: '–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ'
      };
    } catch (error) {
      console.error('[TelegramService] ‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', error);
      throw error;
    }
  }

  formatOrderMessage(orderData) {
    const {
      orderId,
      manager,
      orderData: data,
      isConsultation
    } = orderData;
    
    const orderType = isConsultation ? 'üí¨ –ö–û–ù–°–£–õ–¨–¢–ê–¶–Ü–Ø' : 'üÜï –ù–û–í–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø';
    const orderNumber = orderId || '–ì–µ–Ω–µ—Ä—É—î—Ç—å—Å—è...';
    
    let message = `${orderType} #${orderNumber}\\n\\n`;
    
    message += `üë§ <b>–ö–ª—ñ—î–Ω—Ç:</b> ${data.name || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\\n`;
    message += `üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <a href="tel:${data.phone}">${data.phone || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}</a>\\n`;
    
    if (data.email) {
      message += `üìß <b>Email:</b> ${data.email}\\n`;
    }
    
    message += '\\n';
    
    if (!isConsultation) {
      if (data.product) {
        message += `üì¶ <b>–¢–æ–≤–∞—Ä:</b> ${data.product}\\n`;
      }
      
      if (data.deliveryType) {
        const deliveryText = data.deliveryType === 'delivery' ? '–î–æ—Å—Ç–∞–≤–∫–∞' : '–°–∞–º–æ–≤–∏–≤—ñ–∑';
        message += `üöö <b>–¢–∏–ø:</b> ${deliveryText}\\n`;
      }
      
      if (data.address) {
        message += `üìç <b>–ê–¥—Ä–µ—Å–∞:</b> ${data.address}\\n`;
      }
      
      if (data.region) {
        message += `üó∫Ô∏è <b>–†–µ–≥—ñ–æ–Ω:</b> ${data.region}\\n`;
      }
    }
    
    if (data.message) {
      message += `üí¨ <b>–ö–æ–º–µ–Ω—Ç–∞—Ä:</b> ${data.message}\\n`;
    }
    
    message += '\\n';
    message += `‚è∞ <b>–ß–∞—Å:</b> ${new Date().toLocaleString('uk-UA')}\\n`;
    
    if (manager) {
      message += `üë®‚Äçüíº <b>–ú–µ–Ω–µ–¥–∂–µ—Ä:</b> ${manager}\\n`;
    }
    
    message += `üåê <b>–î–∂–µ—Ä–µ–ª–æ:</b> ${data.source || 'Website'}-${config.ENVIRONMENT}`;
    
    return message;
  }
}

/**
 * –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è
 */
async function testUkrainianText() {
  console.log('üß™ –¢–ï–°–¢ UTF-8 –ö–û–î–£–í–ê–ù–ù–Ø –£–ö–†–ê–á–ù–°–¨–ö–ò–• –°–ò–ú–í–û–õ–Ü–í');
  console.log('='.repeat(60));
  console.log(`üïí –ß–∞—Å: ${new Date().toLocaleString('uk-UA')}`);
  console.log('='.repeat(60));
  
  const telegramService = new TelegramService();
  const testChatId = '1559533342'; // –ì–µ–Ω–Ω–∞–¥—ñ–π –î–∏–∫–∏–π
  
  try {
    // –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–∏–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π —Ç–µ–∫—Å—Ç
    console.log('\\nüß™ –¢–ï–°–¢ 1: –ü—Ä–æ—Å—Ç–∏–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π —Ç–µ–∫—Å—Ç');
    console.log('-'.repeat(40));
    
    const simpleUkrainianMessage = `üß™ –¢–ï–°–¢: –ü—Ä–∏–≤—ñ—Ç –ì–µ–Ω–Ω–∞–¥—ñ–π!
    
‚è∞ –ß–∞—Å: ${new Date().toLocaleString('uk-UA')}
ü§ñ –ë–æ—Ç: @COMSPEC_Orders_bot
üë§ –û—Ç—Ä–∏–º—É–≤–∞—á: –ì–µ–Ω–Ω–∞–¥—ñ–π –î–∏–∫–∏–π

‚úÖ –¶–µ —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é!`;

    console.log('üì§ –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—Ä–æ—Å—Ç–∏–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π —Ç–µ–∫—Å—Ç...');
    const result1 = await telegramService.sendMessage(simpleUkrainianMessage, testChatId, null);
    console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:', result1);
    
    // –¢–µ—Å—Ç 2: –§–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    console.log('\\nüß™ –¢–ï–°–¢ 2: –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è');
    console.log('-'.repeat(40));
    
    const mockOrderData = {
      orderId: '#TEST_UTF8',
      manager: '–ì–µ–Ω–Ω–∞–¥—ñ–π –î–∏–∫–∏–π',
      isConsultation: false,
      orderData: {
        name: '–¢–µ—Å—Ç–æ–≤–∏–π –ö–ª—ñ—î–Ω—Ç',
        phone: '+380999888777',
        email: 'test@comspec.ua',
        product: '–©–µ–±—ñ–Ω—å —Ñ—Ä–∞–∫—Ü—ñ—è 5-20–º–º',
        deliveryType: 'delivery',
        address: '–º. –ö–∏—ó–≤, –≤—É–ª. –•—Ä–µ—â–∞—Ç–∏–∫, 1',
        region: '–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
        message: '–ü–æ—Ç—Ä—ñ–±–Ω–æ 5 —Ç–æ–Ω–Ω –º–∞—Ç–µ—Ä—ñ–∞–ª—É',
        source: 'UTF8-Test'
      }
    };
    
    console.log('üì§ –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è...');
    const orderMessage = telegramService.formatOrderMessage(mockOrderData);
    const result2 = await telegramService.sendMessage(orderMessage, testChatId, 'HTML');
    console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:', result2);
    
    console.log('\\n' + '='.repeat(60));
    console.log('üéâ –í–°–Ü –¢–ï–°–¢–ò –ü–†–û–ô–®–õ–ò –£–°–ü–Ü–®–ù–û!');
    console.log('‚úÖ UTF-8 –∫–æ–¥—É–≤–∞–Ω–Ω—è –ø—Ä–∞—Ü—é—î –∫–æ—Ä–µ–∫—Ç–Ω–æ');
    console.log('‚úÖ –£–∫—Ä–∞—ó–Ω—Å—å–∫—ñ —Å–∏–º–≤–æ–ª–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—é—Ç—å—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
    console.log('='.repeat(60));
    
  } catch (error) {
    console.log('\\n' + '='.repeat(60));
    console.error('üö® –¢–ï–°–¢ –ù–ï –ü–†–û–ô–®–û–í:');
    console.error(`‚ùå ${error.message}`);
    console.log('='.repeat(60));
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—É
testUkrainianText().catch(error => {
  console.error('üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', error);
  process.exit(1);
});