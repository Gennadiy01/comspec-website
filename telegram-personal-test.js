/**
 * üß™ –¢–ï–°–¢ –ü–ï–†–°–û–ù–ê–õ–¨–ù–ò–• –ü–û–í–Ü–î–û–ú–õ–ï–ù–¨ –ú–ï–ù–ï–î–ñ–ï–†–ê–ú
 * –¢–µ—Å—Ç—É—î –ª–æ–≥—ñ–∫—É –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
 */

const https = require('https');

// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
const BOT_TOKEN = '8472229536:AAEquKfaV_nIa5opQAbb6Io2RSm3HRRFgO4';
const API_URL = 'https://api.telegram.org/bot';

// –¢–∏–º—á–∞—Å–æ–≤–∏–π –º–∞–ø—ñ–Ω–≥ –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤ (–±—É–¥–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–æ —Ä–µ–∞–ª—å–Ω–∏–º–∏ Chat ID)
const TELEGRAM_MANAGERS = {
  "–Ü–≥–æ—Ä –ö–∞–ª—ñ–Ω–∫—ñ–Ω": null,              // –ë—É–¥–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–æ –ø—ñ—Å–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è Chat ID
  "–û–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ú–æ—Ä–æ–∂–∏–∫": null,          // –ë—É–¥–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–æ –ø—ñ—Å–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è Chat ID
  "–í—ñ–∫—Ç–æ—Ä—ñ—è –õ—ñ–Ω–∫–µ–≤–∏—á": null,          // –ë—É–¥–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–æ –ø—ñ—Å–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è Chat ID
  "–Ü—Ä–∏–Ω–∞ –Ñ—Ä–º–∞–∫": null,                // –ë—É–¥–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–æ –ø—ñ—Å–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è Chat ID
  "–ê–Ω–Ω–∞ –ì—É—Ä—Å—å–∫–∞": null,               // –ë—É–¥–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–æ –ø—ñ—Å–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è Chat ID
  "–¢–µ—Ç—è–Ω–∞ –ì–æ—Ä–æ–±—ñ–≤—Å—å–∫–∞": null,         // –ë—É–¥–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–æ –ø—ñ—Å–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è Chat ID
  "–í–æ–ª–æ–¥–∏–º–∏—Ä –ú–∞–∫—Å–∏–º—É–∫": null,         // –ë—É–¥–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–æ –ø—ñ—Å–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è Chat ID
  "–ì–µ–Ω–Ω–∞–¥—ñ–π –î–∏–∫–∏–π": null              // –ë—É–¥–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–æ –ø—ñ—Å–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è Chat ID
};

// Fallback —á–∞—Ç (–∑–∞–≥–∞–ª—å–Ω–∞ –≥—Ä—É–ø–∞)
const FALLBACK_CHAT_ID = process.argv[2]; // –ü–µ—Ä–µ–¥–∞—î—Ç—å—Å—è —è–∫ –∞—Ä–≥—É–º–µ–Ω—Ç

/**
 * –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
 */
function sendMessage(chatId, text) {
  return new Promise((resolve, reject) => {
    const url = `${API_URL}${BOT_TOKEN}/sendMessage`;
    
    const data = JSON.stringify({
      chat_id: chatId,
      text: text,
      parse_mode: 'HTML'
    });
    
    const options = {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Content-Length': data.length
      }
    };
    
    const req = https.request(url, options, (res) => {
      let responseBody = '';
      
      res.on('data', (chunk) => {
        responseBody += chunk;
      });
      
      res.on('end', () => {
        try {
          const result = JSON.parse(responseBody);
          if (result.ok) {
            resolve(result.result);
          } else {
            reject(new Error(`Telegram API: ${result.description}`));
          }
        } catch (error) {
          reject(new Error(`JSON parse: ${error.message}`));
        }
      });
    });
    
    req.on('error', (error) => {
      reject(new Error(`HTTP: ${error.message}`));
    });
    
    req.write(data);
    req.end();
  });
}

/**
 * –ü–æ—à—É–∫ Chat ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞
 */
function findManagerChatId(managerName) {
  if (!managerName || typeof managerName !== 'string') {
    return null;
  }
  
  // –¢–æ—á–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å —ñ–º–µ–Ω—ñ
  if (TELEGRAM_MANAGERS[managerName]) {
    return TELEGRAM_MANAGERS[managerName];
  }
  
  // –ü–æ—à—É–∫ –ø–æ —á–∞—Å—Ç–∏–Ω—ñ —ñ–º–µ–Ω—ñ
  const normalizedName = managerName.toLowerCase().trim();
  
  for (const [name, chatId] of Object.entries(TELEGRAM_MANAGERS)) {
    if (name.toLowerCase().includes(normalizedName) || 
        normalizedName.includes(name.toLowerCase())) {
      console.log(`üîç –ó–Ω–∞–π–¥–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: "${managerName}" ‚Üí "${name}" (${chatId})`);
      return chatId;
    }
  }
  
  console.warn(`‚ö†Ô∏è Chat ID –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ "${managerName}" –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`);
  return null;
}

/**
 * –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ fallback
 */
async function sendPersonalMessage(managerName, message) {
  const chatId = findManagerChatId(managerName);
  
  if (chatId) {
    console.log(`üì§ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è ${managerName} (${chatId})`);
    try {
      const result = await sendMessage(chatId, message);
      return {
        success: true,
        target: 'personal',
        manager: managerName,
        chatId: chatId,
        messageId: result.message_id
      };
    } catch (error) {
      console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:`, error.message);
      throw error;
    }
  } else {
    // Fallback –Ω–∞ –∑–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Ç
    if (FALLBACK_CHAT_ID) {
      console.warn(`üîÑ Fallback: –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤ –∑–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Ç (${FALLBACK_CHAT_ID})`);
      const result = await sendMessage(FALLBACK_CHAT_ID, message);
      return {
        success: true,
        target: 'fallback',
        manager: managerName,
        chatId: FALLBACK_CHAT_ID,
        messageId: result.message_id,
        reason: 'manager_not_found'
      };
    } else {
      throw new Error('–ù–µ–º–∞—î Chat ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —ñ –Ω–µ–º–∞—î fallback —á–∞—Ç—É');
    }
  }
}

/**
 * –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 */
function createTestOrder(managerName) {
  return {
    orderId: `#TEST_${Date.now()}`,
    manager: managerName,
    isConsultation: false,
    orderData: {
      name: '–¢–µ—Å—Ç –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å',
      phone: '+380123456789',
      email: 'test@comspec.ua',
      product: '–©–µ–±—ñ–Ω—å —Ñ—Ä–∞–∫—Ü—ñ—è 5-20–º–º',
      deliveryType: 'delivery',
      address: '–º. –ö–∏—ó–≤, –≤—É–ª. –¢–µ—Å—Ç–æ–≤–∞, 1',
      region: '–ö–∏—ó–≤',
      loadingPoint: "–¢–î–í ¬´–Ü–≥–Ω–∞—Ç–ø—ñ–ª—å—Å—å–∫–∏–π –∫–∞—Ä'—î—Ä¬ª",
      message: `–¢–µ—Å—Ç–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ ${managerName}`,
      source: 'PersonalTest'
    }
  };
}

/**
 * –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
 */
function formatOrderMessage(orderData) {
  const {
    orderId,
    manager,
    orderData: data,
    isConsultation
  } = orderData;
  
  const orderType = isConsultation ? 'üí¨ –ö–û–ù–°–£–õ–¨–¢–ê–¶–Ü–Ø' : 'üÜï –ù–û–í–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø';
  
  let message = `${orderType} ${orderId}\n\n`;
  message += `üë§ <b>–ö–ª—ñ—î–Ω—Ç:</b> ${data.name}\n`;
  message += `üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <a href="tel:${data.phone}">${data.phone}</a>\n`;
  
  if (data.email) {
    message += `üìß <b>Email:</b> ${data.email}\n`;
  }
  
  message += '\n';
  
  if (!isConsultation) {
    if (data.product) {
      message += `üì¶ <b>–¢–æ–≤–∞—Ä:</b> ${data.product}\n`;
    }
    
    if (data.deliveryType) {
      const deliveryText = data.deliveryType === 'delivery' ? '–î–æ—Å—Ç–∞–≤–∫–∞' : '–°–∞–º–æ–≤–∏–≤—ñ–∑';
      message += `üöö <b>–¢–∏–ø:</b> ${deliveryText}\n`;
    }
    
    if (data.address) {
      message += `üìç <b>–ê–¥—Ä–µ—Å–∞:</b> ${data.address}\n`;
    }
    
    if (data.region) {
      message += `üó∫Ô∏è <b>–†–µ–≥—ñ–æ–Ω:</b> ${data.region}\n`;
    }
    
    if (data.loadingPoint) {
      message += `üè≠ <b>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:</b> ${data.loadingPoint}\n`;
    }
  }
  
  if (data.message) {
    message += `üí¨ <b>–ö–æ–º–µ–Ω—Ç–∞—Ä:</b> ${data.message}\n`;
  }
  
  message += '\n';
  message += `‚è∞ <b>–ß–∞—Å:</b> ${new Date().toLocaleString('uk-UA')}\n`;
  
  if (manager) {
    message += `üë®‚Äçüíº <b>–ú–µ–Ω–µ–¥–∂–µ—Ä:</b> ${manager}\n`;
  }
  
  message += `üåê <b>–î–∂–µ—Ä–µ–ª–æ:</b> ${data.source}-development`;
  
  return message;
}

/**
 * –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
 */
async function testPersonalMessages() {
  console.log('üß™ –¢–ï–°–¢ –ü–ï–†–°–û–ù–ê–õ–¨–ù–ò–• –ü–û–í–Ü–î–û–ú–õ–ï–ù–¨ –ú–ï–ù–ï–î–ñ–ï–†–ê–ú');
  console.log('=' .repeat(60));
  console.log(`üïí –ß–∞—Å: ${new Date().toLocaleString('uk-UA')}`);
  console.log(`üîÑ Fallback —á–∞—Ç: ${FALLBACK_CHAT_ID || '–ù–ï –í–ö–ê–ó–ê–ù–û'}`);
  console.log('=' .repeat(60));
  
  // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –º–∞–ø—ñ–Ω–≥
  console.log('\nüìã –ü–û–¢–û–ß–ù–ò–ô –ú–ê–ü–Ü–ù–ì –ú–ï–ù–ï–î–ñ–ï–†–Ü–í:');
  Object.entries(TELEGRAM_MANAGERS).forEach(([name, chatId]) => {
    const status = chatId ? `‚úÖ ${chatId}` : '‚ùå –Ω–µ–º–∞—î Chat ID';
    console.log(`  ${name}: ${status}`);
  });
  
  console.log('\n' + '=' .repeat(60));
  
  // –¢–µ—Å—Ç 1: –ú–µ–Ω–µ–¥–∂–µ—Ä –∑ Chat ID (–∫–æ–ª–∏ –±—É–¥–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–æ)
  console.log('\nüß™ –¢–ï–°–¢ 1: –ú–µ–Ω–µ–¥–∂–µ—Ä –∑ Chat ID');
  console.log('-' .repeat(40));
  
  const testManager1 = "–Ü–≥–æ—Ä –ö–∞–ª—ñ–Ω–∫—ñ–Ω";
  const order1 = createTestOrder(testManager1);
  const message1 = formatOrderMessage(order1);
  
  console.log(`üë®‚Äçüíº –¢–µ—Å—Ç—É—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: ${testManager1}`);
  console.log(`üìã –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:\n${message1.substring(0, 200)}...`);
  
  try {
    const result1 = await sendPersonalMessage(testManager1, message1);
    console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: ${result1.target} (ID: ${result1.messageId})`);
  } catch (error) {
    console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞: ${error.message}`);
  }
  
  // –¢–µ—Å—Ç 2: –ù–µ—ñ—Å–Ω—É—é—á–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä
  console.log('\nüß™ –¢–ï–°–¢ 2: –ù–µ—ñ—Å–Ω—É—é—á–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä');
  console.log('-' .repeat(40));
  
  const testManager2 = "–ù–µ—ñ—Å–Ω—É—é—á–∏–π –ú–µ–Ω–µ–¥–∂–µ—Ä";
  const order2 = createTestOrder(testManager2);
  const message2 = formatOrderMessage(order2);
  
  console.log(`üë®‚Äçüíº –¢–µ—Å—Ç—É—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: ${testManager2}`);
  
  try {
    const result2 = await sendPersonalMessage(testManager2, message2);
    console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: ${result2.target} (${result2.reason || 'success'})`);
  } catch (error) {
    console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞: ${error.message}`);
  }
  
  console.log('\n' + '=' .repeat(60));
  console.log('‚úÖ –¢–ï–°–¢–ò –ó–ê–í–ï–†–®–ï–ù–û!');
  
  console.log('\nüéØ –ù–ê–°–¢–£–ü–ù–Ü –ö–†–û–ö–ò:');
  console.log('1. –ü–æ–ø—Ä–æ—Å—ñ—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤ –Ω–∞–ø–∏—Å–∞—Ç–∏ –±–æ—Ç—É @COMSPEC_Orders_bot');
  console.log('2. –ó–∞–ø—É—Å—Ç—ñ—Ç—å: node telegram-collect-chat-ids.js');
  console.log('3. –ó–∞–ø–æ–≤–Ω—ñ—Ç—å Chat ID –≤ environment.js');
  console.log('4. –ó–∞–ø—É—Å—Ç—ñ—Ç—å —Ü–µ–π —Ç–µ—Å—Ç –∑–Ω–æ–≤—É');
  console.log('=' .repeat(60));
}

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤
if (!FALLBACK_CHAT_ID) {
  console.log('‚ùå –ü–æ—Ç—Ä—ñ–±–µ–Ω fallback Chat ID!');
  console.log('–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: node telegram-personal-test.js YOUR_FALLBACK_CHAT_ID');
  process.exit(1);
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤
testPersonalMessages().catch(error => {
  console.error('üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', error);
  process.exit(1);
});