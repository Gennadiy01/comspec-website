/**
 * üÜî –ó–ë–Ü–† TELEGRAM CHAT ID –ú–ï–ù–ï–î–ñ–ï–†–Ü–í
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è Chat ID –≤—Å—ñ—Ö —Ö—Ç–æ –ø–∏—Å–∞–≤ –±–æ—Ç—É
 */

const https = require('https');

// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
const BOT_TOKEN = '8472229536:AAEquKfaV_nIa5opQAbb6Io2RSm3HRRFgO4';
const API_URL = 'https://api.telegram.org/bot';

/**
 * HTTP –∑–∞–ø–∏—Ç –¥–æ Telegram API
 */
function makeRequest(method, params = {}) {
  return new Promise((resolve, reject) => {
    const url = `${API_URL}${BOT_TOKEN}/${method}`;
    
    const options = {
      method: params ? 'POST' : 'GET',
      headers: {
        'Content-Type': 'application/json'
      }
    };
    
    const req = https.request(url, options, (res) => {
      let responseBody = '';
      
      res.on('data', (chunk) => {
        responseBody += chunk;
      });
      
      res.on('end', () => {
        try {
          const result = JSON.parse(responseBody);
          if (result.ok) {
            resolve(result.result);
          } else {
            reject(new Error(`Telegram API: ${result.description}`));
          }
        } catch (error) {
          reject(new Error(`JSON parse: ${error.message}`));
        }
      });
    });
    
    req.on('error', (error) => {
      reject(new Error(`HTTP: ${error.message}`));
    });
    
    if (params) {
      req.write(JSON.stringify(params));
    }
    
    req.end();
  });
}

/**
 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –æ–Ω–æ–≤–ª–µ–Ω—å (–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å)
 */
async function getUpdates() {
  try {
    const updates = await makeRequest('getUpdates');
    return updates;
  } catch (error) {
    throw new Error(`–ü–æ–º–∏–ª–∫–∞ getUpdates: ${error.message}`);
  }
}

/**
 * –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∑–±–æ—Ä—É Chat ID
 */
async function sendCollectionMessage(chatId) {
  const message = `üÜî –ó–ë–Ü–† CHAT ID –ú–ï–ù–ï–î–ñ–ï–†–Ü–í COMSPEC

–ü—Ä–∏–≤—ñ—Ç! üëã

–¶–µ –±–æ—Ç –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω—å –ø—Ä–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.
–í–∞—à Chat ID: <code>${chatId}</code>

üìã –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è:
1. –°–∫–æ–ø—ñ—é–π—Ç–µ –≤–∞—à Chat ID
2. –ù–∞–¥—ñ—à–ª—ñ—Ç—å –π–æ–≥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
3. –ü—ñ—Å–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–∏ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º–µ—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è

‚úÖ Chat ID –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ —Å–∏—Å—Ç–µ–º—ñ.`;

  try {
    await makeRequest('sendMessage', {
      chat_id: chatId,
      text: message,
      parse_mode: 'HTML'
    });
    return true;
  } catch (error) {
    console.error(`–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ ${chatId}:`, error.message);
    return false;
  }
}

/**
 * –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–±–æ—Ä—É Chat ID
 */
async function collectChatIds() {
  console.log('üÜî –ó–ë–Ü–† TELEGRAM CHAT ID –ú–ï–ù–ï–î–ñ–ï–†–Ü–í');
  console.log('=' .repeat(60));
  console.log(`üïí –ß–∞—Å: ${new Date().toLocaleString('uk-UA')}`);
  console.log('=' .repeat(60));
  
  try {
    // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    console.log('üì® –û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω—å –≤—ñ–¥ –±–æ—Ç–∞...');
    const updates = await getUpdates();
    
    console.log(`üìã –ó–Ω–∞–π–¥–µ–Ω–æ ${updates.length} –æ–Ω–æ–≤–ª–µ–Ω—å`);
    
    if (updates.length === 0) {
      console.log('\n‚ùå –ù–µ–º–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤—ñ–¥ –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤!');
      console.log('\nüí° –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è:');
      console.log('1. –ü–æ–ø—Ä–æ—Å—ñ—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤ –Ω–∞–ø–∏—Å–∞—Ç–∏ –±–æ—Ç—É @COMSPEC_Orders_bot');
      console.log('2. –í–æ–Ω–∏ –º–æ–∂—É—Ç—å –Ω–∞–ø–∏—Å–∞—Ç–∏ –±—É–¥—å-—â–æ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: "–ü—Ä–∏–≤—ñ—Ç"');
      console.log('3. –ó–∞–ø—É—Å—Ç—ñ—Ç—å —Ü–µ–π —Å–∫—Ä–∏–ø—Ç –∑–Ω–æ–≤—É');
      return;
    }
    
    // –ó–±–∏—Ä–∞—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ —á–∞—Ç–∏
    const uniqueChats = new Map();
    
    updates.forEach(update => {
      if (update.message && update.message.from) {
        const user = update.message.from;
        const chat = update.message.chat;
        
        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        uniqueChats.set(chat.id, {
          chatId: chat.id,
          firstName: user.first_name,
          lastName: user.last_name || '',
          username: user.username ? `@${user.username}` : '',
          fullName: `${user.first_name} ${user.last_name || ''}`.trim(),
          lastMessage: update.message.text || '(–º–µ–¥—ñ–∞)',
          date: new Date(update.message.date * 1000).toLocaleString('uk-UA')
        });
      }
    });
    
    console.log(`\nüë• –ó–Ω–∞–π–¥–µ–Ω–æ ${uniqueChats.size} —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:`);
    console.log('=' .repeat(60));
    
    // –í–∏–≤–æ–¥–∏–º–æ —Ç–∞–±–ª–∏—Ü—é –∑ Chat ID
    console.log('| Chat ID    | –Ü–º\'—è                | Username        | –û—Å—Ç–∞–Ω–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è');
    console.log('|------------|---------------------|-----------------|--------------------');
    
    const chatArray = Array.from(uniqueChats.values());
    
    for (const user of chatArray) {
      const shortMessage = user.lastMessage.length > 15 
        ? user.lastMessage.substring(0, 15) + '...' 
        : user.lastMessage;
        
      console.log(`| ${user.chatId.toString().padEnd(10)} | ${user.fullName.padEnd(19)} | ${user.username.padEnd(15)} | ${shortMessage}`);
    }
    
    console.log('=' .repeat(60));
    
    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ Chat ID –∫–æ–∂–Ω–æ–º—É
    console.log('\nüì§ –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ Chat ID –∫–æ–∂–Ω–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É...');
    
    let successCount = 0;
    for (const user of chatArray) {
      const success = await sendCollectionMessage(user.chatId);
      if (success) {
        successCount++;
        console.log(`‚úÖ ${user.fullName} (${user.chatId})`);
      } else {
        console.log(`‚ùå ${user.fullName} (${user.chatId})`);
      }
      
      // –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏
      await new Promise(resolve => setTimeout(resolve, 500));
    }
    
    console.log('\n' + '=' .repeat(60));
    console.log(`‚úÖ –ó–ë–Ü–† –ó–ê–í–ï–†–®–ï–ù–û! –ù–∞–¥—ñ—Å–ª–∞–Ω–æ ${successCount}/${chatArray.length} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å`);
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ –≥–æ—Ç–æ–≤–∏–π –º–∞–ø—ñ–Ω–≥ –¥–ª—è Google Sheets
    console.log('\nüìã –ì–û–¢–û–í–ò–ô –ú–ê–ü–Ü–ù–ì –î–õ–Ø GOOGLE SHEETS:');
    console.log('(–°–∫–æ–ø—ñ—é–π—Ç–µ —Ç–∞ –≤—Å—Ç–∞–≤—Ç–µ –≤ —Ç–∞–±–ª–∏—Ü—é)');
    console.log('-' .repeat(40));
    
    chatArray.forEach(user => {
      console.log(`${user.fullName}: ${user.chatId}`);
    });
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ JSON –¥–ª—è environment.js (—è–∫ backup)
    console.log('\nüíæ BACKUP –ú–ê–ü–Ü–ù–ì –î–õ–Ø ENVIRONMENT.JS:');
    console.log('-' .repeat(40));
    console.log('TELEGRAM_MANAGERS: {');
    chatArray.forEach((user, index) => {
      const comma = index < chatArray.length - 1 ? ',' : '';
      console.log(`  "${user.fullName}": "${user.chatId}"${comma}`);
    });
    console.log('}');
    
    console.log('\n' + '=' .repeat(60));
    console.log('üéØ –ù–ê–°–¢–£–ü–ù–Ü –ö–†–û–ö–ò:');
    console.log('1. –î–æ–¥–∞–π—Ç–µ Chat ID –≤ Google Sheets –∫–æ–ª–æ–Ω–∫—É "Telegram_Chat_ID"');
    console.log('2. –ó—ñ—Å—Ç–∞–≤—Ç–µ —ñ–º–µ–Ω–∞ –∑ –≤–∞—à–æ—é —Ç–∞–±–ª–∏—Ü–µ—é –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤');
    console.log('3. –ó–∞–ø—É—Å—Ç—ñ—Ç—å —Ç–µ—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å');
    console.log('=' .repeat(60));
    
  } catch (error) {
    console.error('üí• –ü–æ–º–∏–ª–∫–∞:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫
collectChatIds();